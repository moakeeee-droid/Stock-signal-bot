# --- Patch imghdr ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python 3.13+ ---
import sys, types
if 'imghdr' not in sys.modules:
    sys.modules['imghdr'] = types.ModuleType("imghdr")
    def what(file, h=None):
        return None
    sys.modules['imghdr'].what = what
# ------------------------------------------

import os
import requests
from datetime import datetime, timedelta
from flask import Flask
from telegram import Update, ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# === ENV Variables (Render) ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY")
PUBLIC_URL = os.getenv("PUBLIC_URL")
PORT = int(os.getenv("PORT", 10000))

# === Flask keep-alive ===
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Stock Signal Bot is running."

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ===
def get_polygon_data(date_str):
    url = f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_str}?adjusted=true&apiKey={POLYGON_API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        return r.json().get("results", [])
    else:
        return []

def _fmt_num(n, d=2):
    try:
        return f"{float(n):,.{d}f}"
    except:
        return n

# === Telegram Bot ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "‚Ä¢ /movers ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ)\n"
        "‚Ä¢ /signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT)\n"
        "‚Ä¢ /outlook ‚Äì ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        "‚Ä¢ /help ‚Äì ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n"
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå: pct ‚â• 10.0%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• 0.30, Vol ‚â• 0"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def movers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Polygon (‡∏ü‡∏£‡∏µ mode)...")

    date_str = (datetime.utcnow() - timedelta(days=3)).strftime("%Y-%m-%d")
    data = get_polygon_data(date_str)
    if not data:
        await update.message.reply_text("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Polygon API.")
        return

    movers_up = [d for d in data if d.get('c', 0) >= 0.3 and d.get('v', 0) >= 0 and ((d.get('c', 0) - d.get('o', 0)) / d.get('o', 1)) * 100 >= 10]
    movers_up = sorted(movers_up, key=lambda x: x['c'], reverse=True)[:20]

    msg = f"‚úÖ Top Movers (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {date_str}\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•10.0% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•0.3 | Vol ‚â•0\n\nüìà ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:\n"
    for d in movers_up:
        pct = ((d['c'] - d['o']) / d['o']) * 100
        msg += f"‚Ä¢ {d['T']} +{_fmt_num(pct)}% @{_fmt_num(d['c'])} Vol:{_fmt_num(d['v'],0)}\n"

    await update.message.reply_text(msg)

async def signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üïê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")

    # Mock Data (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°)
    strong_call = ["PACB", "QBTZ", "GITS", "PMI", "BYND"]
    watch_call = ["NESR", "ALTS", "UPB", "YHC", "OVID"]
    strong_put = ["NVAVW", "QBTX", "UHG", "STI", "OWLS"]
    watch_put = ["AZTR", "CATX", "RAPT", "AENTW", "GNPNX"]

    msg = (
        "üìä ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n\n"
        "üíö Strong CALL\n" + ", ".join(strong_call) +
        "\n\nüü© Watch CALL\n" + ", ".join(watch_call) +
        "\n\n‚ù§Ô∏è Strong PUT\n" + ", ".join(strong_put) +
        "\n\nüü• Watch PUT\n" + ", ".join(watch_put)
    )
    await update.message.reply_text(msg)

async def outlook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...")

    msg = (
        "üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        "‚Ä¢ Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô: Strong CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: BYND, KUKE, JFU, QBTZ\n"
        "‚Ä¢ ‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô: Watch CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: GSIT, NVTX, NIOBW, BETR\n"
        "‚Ä¢ Momentum ‡∏Ç‡∏≤‡∏•‡∏á: Strong PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: NVAVW, QBTX, UHG, STI\n"
        "‚Ä¢ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á: Watch PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: AZTR, CATX, RAPT, GNPNX\n\n"
        "üí° ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:\n"
        "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏∏‡πâ‡∏°‡∏´‡∏ô‡∏∏‡∏ô\n"
        "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°\n"
        "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô\n"
        "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö"
    )
    await update.message.reply_text(msg)

# === ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó ===
def main():
    app_flask = ApplicationBuilder().token(BOT_TOKEN).build()
    app_flask.add_handler(CommandHandler("start", start))
    app_flask.add_handler(CommandHandler("help", help_cmd))
    app_flask.add_handler(CommandHandler("movers", movers))
    app_flask.add_handler(CommandHandler("signals", signals))
    app_flask.add_handler(CommandHandler("outlook", outlook))

    # Flask + Telegram ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    from threading import Thread
    Thread(target=lambda: app.run(host="0.0.0.0", port=PORT)).start()
    app_flask.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
