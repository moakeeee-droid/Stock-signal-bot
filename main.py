# -*- coding: utf-8 -*-
# Stock Signal Bot (Free mode: previous business day via Polygon /aggs/grouped)
# Adds CALL/PUT signal classification from daily OHLCV (approx. momentum)

import os
import time
import json
import math
import threading
from datetime import datetime, timedelta, timezone
import requests
from flask import Flask

# ===== ENV =====
BOT_TOKEN        = os.environ["BOT_TOKEN"].strip()
CHAT_ID          = os.environ["CHAT_ID"].strip()
POLYGON_API_KEY  = os.environ["POLYGON_API_KEY"].strip()

# ===== SETTINGS (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) =====
CHECK_INTERVAL_SEC = 60 * 20   # ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ: ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å ~20 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏û‡∏≠ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
ALERT_PCT          = 10.0      # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏±‡∏î Top Movers ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (¬±%)
MIN_PRICE          = 0.30
MIN_VOL_FREE       = 0         # ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Top Movers ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
# ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
STRONG_CALL_MIN_PCT   = 15.0
STRONG_PUT_MAX_PCT    = -12.0
WATCH_CALL_MIN_PCT    = 5.0
WATCH_PUT_MAX_PCT     = -5.0
NEAR_HIGH_CUTOFF      = 0.20   # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ high (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å high ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20% ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á)
NEAR_LOW_CUTOFF       = 0.20   # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ low
THICK_BODY_RATIO      = 0.60   # |(close-open)| / (high-low) >= 0.60
MIN_PRICE_FOR_OPTIONS = 1.00
MIN_VOL_FOR_OPTIONS   = 200_000

TZ_NY = timezone(timedelta(hours=-4))  # EDT (‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó)

# ===== Helpers =====
def tg(text: str):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
        r = requests.post(url, json=payload, timeout=15)
        r.raise_for_status()
    except Exception as e:
        print("TG error:", e)

def fmt_num(x):
    try:
        if x >= 1_000_000_000: return f"{x/1_000_000_000:.2f}B"
        if x >= 1_000_000:     return f"{x/1_000_000:.2f}M"
        if x >= 1_000:         return f"{x/1_000:.2f}K"
        return f"{x:.0f}"
    except:
        return str(x)

def last_business_day_utc():
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà US ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏®‡∏∏‡∏Å‡∏£‡πå-‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ)
    now = datetime.now(timezone.utc)
    d = now.date()
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏°‡∏∏‡∏° UTC ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    # ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
    while d.weekday() >= 5:
        d = d - timedelta(days=1)
    return d

def fetch_grouped(date_iso: str):
    url = f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_iso}?adjusted=true&apiKey={POLYGON_API_KEY}"
    r = requests.get(url, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"Polygon {r.status_code}: {r.text}")
    data = r.json()
    if data.get("status") != "OK":
        # ‡πÉ‡∏ô free ‡∏à‡∏∞‡πÑ‡∏î‡πâ NOT_AUTHORIZED ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏¢‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ
        raise RuntimeError(f"Polygon status: {data.get('status')} | {data.get('message')}")
    return data.get("results", [])

def pct_change_from_open(o, c):
    try:
        if o and o > 0:
            return (c - o) / o * 100.0
    except:
        pass
    return None

def close_position_in_range(c, h, l):
    """return closeness_to_high, closeness_to_low in 0..1 of range (h-l). smaller is 'closer'."""
    rng = max(1e-8, h - l)
    near_high = (h - c) / rng    # 0 => at high, 1 => at low
    near_low  = (c - l) / rng    # 0 => at low, 1 => at high
    return near_high, near_low

def body_ratio(o, c, h, l):
    rng = max(1e-8, h - l)
    return abs(c - o) / rng

def classify_signal(bar):
    """
    ‡∏£‡∏±‡∏ö bar ‡∏ó‡∏µ‡πà‡∏°‡∏µ: T(symbol), o,h,l,c,v
    ‡∏Ñ‡∏∑‡∏ô (label, reason) ‡πÄ‡∏ä‡πà‡∏ô ("Strong CALL", "pct +23.4%, close near H, thick body, vol 2.3M")
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏∑‡∏ô (None, None)
    """
    sym = bar.get("T")
    o   = bar.get("o", 0.0)
    h   = bar.get("h", 0.0)
    l   = bar.get("l", 0.0)
    c   = bar.get("c", 0.0)
    v   = int(bar.get("v", 0))

    if c <= 0 or h <= 0 or l <= 0: 
        return (None, None)

    pct = pct_change_from_open(o, c)
    if pct is None:
        return (None, None)

    nh, nl = close_position_in_range(c, h, l)
    br = body_ratio(o, c, h, l)

    # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å Option signal (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÄ‡∏û‡∏ô‡∏ô‡∏µ)
    good_for_opt = (c >= MIN_PRICE_FOR_OPTIONS and v >= MIN_VOL_FOR_OPTIONS)

    # Strong CALL
    if pct >= STRONG_CALL_MIN_PCT and nh <= NEAR_HIGH_CUTOFF and br >= THICK_BODY_RATIO and good_for_opt:
        reason = f"pct +{pct:.1f}%, close near H, strong body, ${c:.2f}, Vol {fmt_num(v)}"
        return ("Strong CALL", reason)

    # Watch CALL
    if pct >= WATCH_CALL_MIN_PCT and nh <= (NEAR_HIGH_CUTOFF + 0.10):  # ‡∏ú‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        reason = f"pct +{pct:.1f}%, close near H, ${c:.2f}, Vol {fmt_num(v)}"
        return ("Watch CALL", reason)

    # Strong PUT
    if pct <= STRONG_PUT_MAX_PCT and nl <= NEAR_LOW_CUTOFF and br >= THICK_BODY_RATIO and good_for_opt:
        reason = f"pct {pct:.1f}%, close near L, strong body, ${c:.2f}, Vol {fmt_num(v)}"
        return ("Strong PUT", reason)

    # Watch PUT
    if pct <= WATCH_PUT_MAX_PCT and nl <= (NEAR_LOW_CUTOFF + 0.10):
        reason = f"pct {pct:.1f}%, close near L, ${c:.2f}, Vol {fmt_num(v)}"
        return ("Watch PUT", reason)

    return (None, None)

def summarize_top_movers(bars, date_used):
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Top Movers ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    lst = []
    for b in bars:
        c, o, v, sym = b.get("c", 0.0), b.get("o", 0.0), int(b.get("v", 0)), b.get("T")
        if c is None or o in (None, 0): 
            continue
        pct = pct_change_from_open(o, c)
        if pct is None:
            continue
        if abs(pct) >= ALERT_PCT and c >= MIN_PRICE and v >= MIN_VOL_FREE:
            lst.append((pct, sym, c, v))
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á ‚Üí ‡∏•‡∏á‡πÅ‡∏£‡∏á
    lst.sort(key=lambda x: -x[0])
    gainers = [x for x in lst if x[0] >= ALERT_PCT]
    losers  = [x for x in lst if x[0] <= -ALERT_PCT]

    lines = []
    lines.append("‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
    lines.append(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: <code>{date_used}</code>")
    lines.append(f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•{ALERT_PCT:.1f}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•{MIN_PRICE} | Vol ‚â•{MIN_VOL_FREE}")
    if gainers:
        lines.append("\nüìà <u>‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:</u>")
        for pct, sym, c, v in gainers[:20]:
            lines.append(f"‚Ä¢ {sym} +{pct:.1f}% @{c:.2f} Vol:{fmt_num(v)}")
    if losers:
        lines.append("\nüìâ <u>‡∏•‡∏á‡πÅ‡∏£‡∏á:</u>")
        for pct, sym, c, v in losers[:20]:
            lines.append(f"‚Ä¢ {sym} {pct:.1f}% @{c:.2f} Vol:{fmt_num(v)}")
    return "\n".join(lines)

def summarize_option_signals(bars, date_used):
    groups = {"Strong CALL": [], "Watch CALL": [], "Strong PUT": [], "Watch PUT": []}
    for b in bars:
        label, reason = classify_signal(b)
        if label:
            sym = b.get("T")
            c   = b.get("c", 0.0)
            groups[label].append((sym, c, reason))

    if not any(groups.values()):
        return f"üß≠ <b>Option Signals (‡∏ü‡∏£‡∏µ)</b>\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: <code>{date_used}</code>\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"

    order = ["Strong CALL", "Watch CALL", "Strong PUT", "Watch PUT"]
    title = f"üß≠ <b>Option Signals (‡∏ü‡∏£‡∏µ)</b>\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: <code>{date_used}</code>"
    lines = [title]
    for key in order:
        arr = groups[key]
        if not arr: 
            continue
        icon = "üíö" if "CALL" in key else "‚ù§Ô∏è"
        lines.append(f"\n{icon} <u>{key}</u>")
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏∞ 15 ‡∏ï‡∏±‡∏ß
        for sym, c, reason in arr[:15]:
            lines.append(f"‚Ä¢ {sym} @{c:.2f} ‚Äî {reason}")
    return "\n".join(lines)

def scan_free_once():
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà Polygon ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏£‡∏µ (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
    d = last_business_day_utc()
    date_iso = d.isoformat()
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡∏≠ NOT_AUTHORIZED ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏¢‡πÄ‡∏≠‡∏á 1 ‡∏ß‡∏±‡∏ô
    for _ in range(3):
        try:
            bars = fetch_grouped(date_iso)
            return date_iso, bars
        except Exception as e:
            msg = str(e)
            if "NOT_AUTHORIZED" in msg or "Attempted to request today's data" in msg:
                d = d - timedelta(days=1)
                date_iso = d.isoformat()
                continue
            raise

def worker_loop():
    tg("üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Polygon)")
    last_sent_date = None
    while True:
        try:
            date_iso, bars = scan_free_once()
            # ‡∏™‡πà‡∏á Top movers (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
            if last_sent_date != date_iso:
                txt = summarize_top_movers(bars, date_iso)
                tg(txt)
                txt2 = summarize_option_signals(bars, date_iso)
                tg(txt2)
                last_sent_date = date_iso
            else:
                # ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡πÅ‡∏õ‡∏° (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
                pass
        except Exception as e:
            print("Loop error:", e)
            tg(f"‚ùóÔ∏èScanner error (free): {e}")
        time.sleep(CHECK_INTERVAL_SEC)

# ===== Flask (keep alive) =====
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running fine."

def run_flask():
    app.run(host="0.0.0.0", port=10000)

if __name__ == "__main__":
    t1 = threading.Thread(target=worker_loop, daemon=True)
    t1.start()
    run_flask()
