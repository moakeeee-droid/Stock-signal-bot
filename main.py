# -*- coding: utf-8 -*-
"""
Stock Signal Bot (Render + Telegram long-polling)
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö python-telegram-bot ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô (>=20.x ‡∏ñ‡∏∂‡∏á 21.x) ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à args ‡∏Ç‡∏≠‡∏á run_polling
- ‡πÉ‡∏ä‡πâ Flask ‡πÄ‡∏õ‡πá‡∏ô health page
- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ: /help /ping /movers /signals /outlook /picks
  (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö placeholder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≠ API ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
"""

import os
import logging
import asyncio
import inspect
import threading
from datetime import datetime

from flask import Flask, request

# --- python-telegram-bot (PTB) imports (v20+ / v21+) ---
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# =========================
# Config & Logging
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", "").strip()  # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ BOT_TOKEN ‡πÉ‡∏ô Render Environment")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("stock-signal-bot")

# =========================
# Flask app (health page)
# =========================
flask_app = Flask(__name__)

@flask_app.get("/")
def index():
    return "OK - stock-signal-bot", 200

@flask_app.get("/healthz")
def health():
    return {"status": "ok", "time": datetime.utcnow().isoformat()}, 200

# =========================
# Telegram handlers
# =========================
HELP_TEXT = (
    "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
    "‚Ä¢ /ping ‚Äì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
    "‚Ä¢ /help ‚Äì ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ\n"
    "‚Ä¢ /movers ‚Äì (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) Top movers ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
    "‚Ä¢ /signals ‚Äì (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch CALL/PUT\n"
    "‚Ä¢ /outlook ‚Äì (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
    "‚Ä¢ /picks ‚Äì (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏±‡∏ö‡∏ï‡∏≤\n"
    "\n*‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:* ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô "
    "‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ï‡πà‡∏≠ API ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetch_* ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
)

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong üèì")

# --------- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô placeholder) ----------
def fetch_movers() -> str:
    # TODO: ‡∏ï‡πà‡∏≠ API ‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏ä‡πà‡∏ô Polygon/‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)
    return (
        "üìà Top Movers (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "‚Ä¢ ABC @1.23 ‚Äî pct 18.7%, Vol 12.3M (near H)\n"
        "‚Ä¢ XYZ @0.75 ‚Äî pct -24.1%, Vol 4.5M (near L)\n"
    )

def fetch_signals() -> str:
    return (
        "üîÆ Signals (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "‚Ä¢ Strong CALL: 15 | Watch CALL: 28\n"
        "‚Ä¢ Strong PUT : 22 | Watch PUT : 30\n"
        "‚Üí ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏£‡∏ß‡∏°: ‡∏Å‡∏•‡∏≤‡∏á\n"
    )

def fetch_outlook() -> str:
    return (
        "üß≠ Outlook (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏±‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏Å‡∏•‡∏∏‡πà‡∏° Strong, ‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏ô Watch\n"
    )

def fetch_picks() -> str:
    return (
        "üìù Picks (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "‚Ä¢ BYND, KUKE, CIIT, GSIT, NVTX\n"
        "‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏ó‡∏™‡∏±‡πâ‡∏ô ‡πÜ\n"
    )

async def cmd_movers(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(fetch_movers())

async def cmd_signals(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(fetch_signals())

async def cmd_outlook(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(fetch_outlook())

async def cmd_picks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(fetch_picks())

# =========================
# Build Telegram app
# =========================
def build_tg_app():
    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("help", cmd_help))
    app_tg.add_handler(CommandHandler("start", cmd_help))
    app_tg.add_handler(CommandHandler("ping", cmd_ping))

    app_tg.add_handler(CommandHandler("movers", cmd_movers))
    app_tg.add_handler(CommandHandler("signals", cmd_signals))
    app_tg.add_handler(CommandHandler("outlook", cmd_outlook))
    app_tg.add_handler(CommandHandler("picks", cmd_picks))

    return app_tg

# =========================
# Long-polling runner (compat)
# =========================
async def run_telegram():
    app_tg = build_tg_app()
    log.info("Starting telegram long-polling‚Ä¶")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô run_polling ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö args ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á (‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)
    sig = inspect.signature(app_tg.run_polling).parameters
    kwargs = {}
    if "close_loop" in sig:
        kwargs["close_loop"] = False
    if "handle_signals" in sig:
        kwargs["handle_signals"] = False

    await app_tg.run_polling(**kwargs)

def start_telegram_thread():
    # ‡∏£‡∏±‡∏ô asyncio ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ò‡∏£‡∏î
    def _target():
        try:
            asyncio.run(run_telegram())
        except Exception as e:
            log.exception("Telegram thread crashed: %s", e)

    th = threading.Thread(target=_target, name="run_telegram_longpoll", daemon=True)
    th.start()
    return th

# =========================
# Entrypoint
# =========================
if __name__ == "__main__":
    log.info("BOT_TOKEN loaded (length=%d)", len(BOT_TOKEN))
    start_telegram_thread()

    log.info("Starting Flask on 0.0.0.0:%s", PORT)
    # ‡πÉ‡∏ä‡πâ Flask dev server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render ‡∏ü‡∏£‡∏µ‡πÑ‡∏ó‡∏£‡πå‡πÑ‡∏î‡πâ
    flask_app.run(host="0.0.0.0", port=PORT, debug=False)
