# -*- coding: utf-8 -*-
"""
Stock-signal bot (Render)
- ‡πÅ‡∏¢‡∏Å Telegram bot ‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 'thread' ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á
- Flask ‡∏£‡∏±‡∏ô‡πÉ‡∏ô main thread (Render health check / ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: /start /help /ping /movers /signals /outlook /picks
- ‡πÉ‡∏ä‡πâ PTB v20.3 + httpx 0.24.1 (‡∏î‡∏π requirements.txt)
"""

import os
import logging
from threading import Thread
import asyncio
from datetime import datetime, timezone

from flask import Flask, jsonify

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ---------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Log ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("stock-signal-bot")

# ---------------------- ENV ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
PORT = int(os.getenv("PORT", "10000"))
PUBLIC_URL = os.getenv("PUBLIC_URL", "")  # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

if not BOT_TOKEN:
    log.error("‚ùå ENV BOT_TOKEN ‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà! ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ô Render > Environment")
    # ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥ sys.exit() ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Flask ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
else:
    log.info("‚úÖ BOT_TOKEN loaded (length=%s)", len(BOT_TOKEN))

# ---------------------- Flask app ----------------------
app = Flask(__name__)

@app.get("/")
def root():
    return jsonify(
        ok=True,
        service="stock-signal-bot",
        now_utc=datetime.now(timezone.utc).isoformat(),
        telegram="long-polling thread alive?"  # ‡πÅ‡∏Ñ‡πà‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ
    )

# ---------------------- Telegram Handlers ----------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ üòä"
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "‚Ä¢ /ping ‚Äì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
        "‚Ä¢ /movers ‚Äì Top movers (‡πÄ‡∏î‡πÇ‡∏°)\n"
        "‚Ä¢ /signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡πÄ‡∏î‡πÇ‡∏°)\n"
        "‚Ä¢ /outlook ‚Äì ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏î‡πÇ‡∏°)\n"
        "‚Ä¢ /picks ‚Äì ‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à (‡πÄ‡∏î‡πÇ‡∏°)\n"
    )
    await update.message.reply_text(text)

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def cmd_movers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà movers (‡πÄ‡∏î‡πÇ‡∏°) ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")

async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üß≠ signals (‡πÄ‡∏î‡πÇ‡∏°) ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")

async def cmd_outlook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üî≠ outlook (‡πÄ‡∏î‡πÇ‡∏°) ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")

async def cmd_picks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéØ picks (‡πÄ‡∏î‡πÇ‡∏°) ‚Äì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")

# ---------------------- ‡∏ï‡∏±‡∏ß‡∏ö‡∏≠‡∏ó (async) ----------------------
async def build_app():
    if not BOT_TOKEN:
        log.error("BOT_TOKEN ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏à‡∏∂‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà start telegram app")
        return None

    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()

    # register handlers
    app_tg.add_handler(CommandHandler("start", cmd_start))
    app_tg.add_handler(CommandHandler("help", cmd_help))
    app_tg.add_handler(CommandHandler("ping", cmd_ping))
    app_tg.add_handler(CommandHandler("movers", cmd_movers))
    app_tg.add_handler(CommandHandler("signals", cmd_signals))
    app_tg.add_handler(CommandHandler("outlook", cmd_outlook))
    app_tg.add_handler(CommandHandler("picks", cmd_picks))

    # ‡∏•‡∏≠‡∏á getMe ‡πÄ‡∏û‡∏∑‡πà‡∏≠ log ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ token ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    me = await app_tg.bot.get_me()
    log.info("ü§ñ Authorized as @%s (id=%s)", me.username, me.id)

    return app_tg

async def run_telegram():
    """
    ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö long-polling ‡πÉ‡∏ô event loop ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏£‡∏î‡∏ô‡∏µ‡πâ
    ‡πÉ‡∏ä‡πâ asyncio.run(run_telegram()) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ò‡∏£‡∏î
    """
    app_tg = await build_app()
    if app_tg is None:
        return

    log.info("üöÄ Starting telegram long-polling‚Ä¶")
    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î stop_signals ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î loop ‡∏ú‡∏¥‡∏î‡∏ó‡∏µ‡πà
    await app_tg.run_polling(close_loop=False)

def start_telegram_thread():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ò‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô asyncio.run(run_telegram())
    ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main thread ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô Flask
    """
    def _target():
        try:
            asyncio.run(run_telegram())
        except Exception as e:
            log.exception("‚ùå Telegram thread crashed: %s", e)

    th = Thread(target=_target, name="telegram-thread", daemon=True)
    th.start()
    log.info("üßµ started telegram-thread")

# ---------------------- Entry point ----------------------
if __name__ == "__main__":
    # ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Telegram ‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å
    start_telegram_thread()

    # ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î Flask (‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å)
    log.info("üåê Starting Flask on 0.0.0.0:%s", PORT)
    app.run(host="0.0.0.0", port=PORT, debug=False)
