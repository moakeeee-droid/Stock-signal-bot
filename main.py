# -*- coding: utf-8 -*-
"""
Stock-signal-bot (Render + Telegram + Yahoo)
- ‡πÇ‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏Å: Webhook (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á PUBLIC_URL, BOT_TOKEN)
- ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Yahoo (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ API key) | ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /ping, /signals, /outlook, /picks, /movers
"""

from __future__ import annotations

import os
import asyncio
from datetime import datetime, timezone
from typing import Dict, List, Optional

import aiohttp
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# =========================
# Config / ENV
# =========================
BOT_TOKEN: str = os.getenv("BOT_TOKEN", "").strip()
PUBLIC_URL: str = os.getenv("PUBLIC_URL", "").rstrip("/")
WEBHOOK_PATH: str = os.getenv("WEBHOOK_PATH", "/webhook")
PORT: int = int(os.getenv("PORT", "10000"))

DATA_SOURCE: str = os.getenv("DATA_SOURCE", "yahoo").lower()  # yahoo | demo
TZ_NAME: str = os.getenv("TZ", "Asia/Bangkok")

# ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /movers ‡πÅ‡∏•‡∏∞ /picks
DEFAULT_MOVERS = ["AAPL", "NVDA", "TSLA"]
DEFAULT_PICKS = ["BYND", "KUKE", "GSIT"]

# =========================
# Yahoo Quote Client
# =========================
YF_URL = "https://query1.finance.yahoo.com/v7/finance/quote"
YF_HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/124.0 Safari/537.36"
    ),
    "Accept": "application/json, text/plain, */*",
    "Connection": "keep-alive",
}


async def fetch_yahoo_quotes(
    symbols: List[str],
    timeout: float = 8.0,
    retries: int = 2,
) -> Dict[str, Dict]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Yahoo; ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô {}"""
    params = {"symbols": ",".join(symbols)}
    for attempt in range(retries + 1):
        try:
            async with aiohttp.ClientSession(headers=YF_HEADERS) as session:
                async with session.get(YF_URL, params=params, timeout=timeout) as r:
                    if r.status != 200:
                        raise RuntimeError(f"Yahoo status {r.status}")
                    data = await r.json()
                    result = data.get("quoteResponse", {}).get("result", [])
                    quotes: Dict[str, Dict] = {}
                    for q in result:
                        s = q.get("symbol")
                        if not s:
                            continue
                        quotes[s] = {
                            "symbol": s,
                            "name": q.get("shortName") or q.get("longName") or s,
                            "price": q.get("regularMarketPrice"),
                            "change": q.get("regularMarketChange"),
                            "changePct": q.get("regularMarketChangePercent"),
                            "prevClose": q.get("regularMarketPreviousClose"),
                            "currency": q.get("currency"),
                            "marketState": q.get("marketState"),
                        }
                    return quotes
        except Exception:
            if attempt >= retries:
                return {}
            await asyncio.sleep(1.2 * (attempt + 1))
    return {}


# =========================
# Helpers
# =========================
def utc_iso() -> str:
    return datetime.now(timezone.utc).isoformat(timespec="seconds")


def fmt_change(ch: Optional[float]) -> str:
    if ch is None:
        return "‚Äî"
    return f"{ch:+.2f}"


def fmt_pct(pct: Optional[float]) -> str:
    if pct is None:
        return "‚Äî"
    return f"{pct:+.2f}%"


def fmt_price(p: Optional[float]) -> str:
    if p is None:
        return "‚Äî"
    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô US ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    return f"{p:.2f}"


async def get_quotes(symbols: List[str]) -> Dict[str, Dict]:
    """‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° DATA_SOURCE"""
    if DATA_SOURCE == "yahoo":
        return await fetch_yahoo_quotes(symbols)
    # ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
    out: Dict[str, Dict] = {}
    for s in symbols:
        out[s] = {
            "symbol": s,
            "name": s,
            "price": 100.0,
            "change": 0.0,
            "changePct": 0.0,
            "prevClose": 100.0,
            "currency": "USD",
            "marketState": "REG",
        }
    return out


def badge_ready(ok: bool) -> str:
    return "‚úÖ" if ok else "‚ö†Ô∏è"


# =========================
# Commands
# =========================
async def cmd_ping(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong üèì")


async def cmd_signals(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏£‡∏¥‡∏á)
    text = "üü£ Signals (‡∏à‡∏≥‡∏•‡∏≠‡∏á)\nStrong CALL: 15 | Strong PUT: 22"
    await update.message.reply_text(text)


async def cmd_outlook(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏™‡∏£‡∏∏‡∏õ sentiment ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    text = "üìà Outlook ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÜ"
    await update.message.reply_text(text)


async def _build_line_from_quote(q: Optional[Dict], symbol: str) -> str:
    if not q or q.get("price") is None:
        return f"‚ö†Ô∏è {symbol}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
    p = fmt_price(q.get("price"))
    ch = fmt_change(q.get("change"))
    pct = fmt_pct(q.get("changePct"))
    name = q.get("name") or symbol
    cur = q.get("currency") or ""
    return f"‚úÖ {symbol}: {name} ‚Äî {p} {cur} ({ch}, {pct})"


async def cmd_picks(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô...")

    syms = DEFAULT_PICKS
    quotes = {}
    try:
        quotes = await get_quotes(syms)
    except Exception:
        quotes = {}

    lines = ["üßæ Picks (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)"]
    for s in syms:
        q = quotes.get(s)
        lines.append(await _build_line_from_quote(q, s))
    msg = "\n".join(lines)
    await update.message.reply_text(msg)


async def cmd_movers(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    syms = DEFAULT_MOVERS
    quotes = {}
    ok = True
    try:
        quotes = await get_quotes(syms)
        ok = len(quotes) > 0
    except Exception:
        ok = False

    if not ok:
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        await update.message.reply_text("üìä Movers: (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) AAPL, NVDA, TSLA")
        return

    lines = [f"üìä Movers {badge_ready(True)}:"]
    for s in syms:
        q = quotes.get(s)
        if not q:
            lines.append(f"‚ö†Ô∏è {s}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
            continue
        p = fmt_price(q.get("price"))
        pct = fmt_pct(q.get("changePct"))
        lines.append(f"‚Ä¢ {s}: {p} ({pct})")
    await update.message.reply_text("\n".join(lines))


async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "/ping - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
        "/signals - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á\n"
        "/outlook - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î\n"
        "/picks - ‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à\n"
        "/movers - ‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏î‡πà‡∏ô\n\n"
        f"‚è±Ô∏è {utc_iso()}"
    )
    await update.message.reply_text(text)


# =========================
# Application / Webhook
# =========================
def require_env() -> None:
    missing = []
    if not BOT_TOKEN:
        missing.append("BOT_TOKEN")
    if not PUBLIC_URL:
        missing.append("PUBLIC_URL")
    if missing:
        raise RuntimeError(
            "Missing env: " + ", ".join(missing) + ". "
            "Set them in Render ‚Üí Environment."
        )


def build_application() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    # register handlers
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("ping", cmd_ping))
    app.add_handler(CommandHandler("signals", cmd_signals))
    app.add_handler(CommandHandler("outlook", cmd_outlook))
    app.add_handler(CommandHandler("picks", cmd_picks))
    app.add_handler(CommandHandler("movers", cmd_movers))
    return app


async def run_webhook(application: Application) -> None:
    """
    ‡∏£‡∏±‡∏ô webhook ‡∏Ç‡∏≠‡∏á PTB ‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Render ‡∏à‡∏∞‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏à‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ô‡∏µ‡πâ)
    ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î event loop (close_loop=False) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á RuntimeError
    """
    webhook_url = f"{PUBLIC_URL}{WEBHOOK_PATH}"
    await application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH.lstrip("/"),
        webhook_url=webhook_url,
        drop_pending_updates=True,
        close_loop=False,  # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏≠‡∏¢‡πà‡∏≤‡∏õ‡∏¥‡∏î loop ‡∏Ç‡∏≠‡∏á asyncio
        # bootstrap_retries=0  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏Å‡πá‡∏û‡∏≠
    )


async def main_async() -> None:
    require_env()
    app = build_application()
    await run_webhook(app)


def main() -> None:
    """
    Entry point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render: python main.py
    ‡∏ñ‡πâ‡∏≤ event loop ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° ‚Üí run_until_complete
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞ loop ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÅ‡∏•‡πâ‡∏ß run_forever
    """
    try:
        asyncio.get_event_loop().run_until_complete(main_async())
    except RuntimeError:
        # ‡∏Å‡∏£‡∏ì‡∏µ loop ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥) ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏≤‡∏á‡∏£‡∏≠
        loop = asyncio.get_event_loop()
        loop.create_task(main_async())
        loop.run_forever()


if __name__ == "__main__":
    main()
