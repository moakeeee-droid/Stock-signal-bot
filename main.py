# -*- coding: utf-8 -*-
"""
Stock-signal-bot (free mode skeleton)
- Telegram: python-telegram-bot v20+
- Web: Flask (for Render healthcheck / logs)
- Run model: Telegram long-polling in a background thread + Flask main thread
- ENV: BOT_TOKEN, POLYGON_API_KEY (optional), CHAT_ID (optional), PUBLIC_URL (optional), PORT
"""

import os
import sys
import threading
import asyncio
import logging
from datetime import datetime, timedelta, timezone

import requests
from flask import Flask, jsonify

# =========================
# Logging
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
log = logging.getLogger("stock-signal-bot")

# =========================
# ENV
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY", "").strip()
CHAT_ID = os.getenv("CHAT_ID", "").strip()  # optional broadcast
PUBLIC_URL = os.getenv("PUBLIC_URL", "").strip()
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    log.warning("BOT_TOKEN is empty! Bot will not start until you set it.")

# =========================
# Flask app (health / home)
# =========================
app = Flask(__name__)

@app.route("/")
def home():
    return "Stock-signal-bot is running."

@app.route("/health")
def health():
    return jsonify({"ok": True, "time": datetime.utcnow().isoformat()})


# =========================
# Helpers
# =========================
def _fmt_num(x, digits=2):
    try:
        return f"{float(x):,.{digits}f}"
    except Exception:
        return str(x)

def _yesterday_us():
    # ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‚Äú‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‚Äù ‡∏Ç‡∏≠‡∏á US (‡πÅ‡∏ö‡∏ö‡∏´‡∏¢‡∏≤‡∏ö ‡πÜ: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)
    tz = timezone.utc
    d = datetime.now(tz) - timedelta(days=1)
    return d.strftime("%Y-%m-%d")

def fetch_polygon_grouped(date_str):
    """
    ‡∏î‡∏∂‡∏á Top movers ‡πÅ‡∏ö‡∏ö‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    ‡∏ñ‡πâ‡∏≤ key ‡πÑ‡∏°‡πà‡∏û‡∏≠/‡πÅ‡∏ú‡∏ô‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô []
    """
    if not POLYGON_API_KEY:
        return []

    url = f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_str}"
    params = {"adjusted": "true", "apiKey": POLYGON_API_KEY}
    try:
        r = requests.get(url, params=params, timeout=15)
        if r.status_code != 200:
            log.warning("Polygon status %s: %s", r.status_code, r.text[:200])
            return []
        data = r.json()
        if not isinstance(data, dict) or data.get("status") != "OK":
            log.warning("Polygon response: %s", str(data)[:200])
            return []
        results = data.get("results", []) or []
        # results: list of {T: ticker, c: close, o: open, h: high, l: low, v: volume, ...}
        movers = []
        for it in results:
            t = it.get("T")
            o = it.get("o")
            c = it.get("c")
            v = it.get("v")
            if t is None or o in (None, 0) or c is None:
                continue
            pct = (c - o) / o * 100.0
            movers.append({
                "ticker": t,
                "open": o,
                "close": c,
                "pct": pct,
                "vol": v,
                "high": it.get("h"),
                "low": it.get("l"),
            })
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
        movers.sort(key=lambda x: abs(x["pct"]), reverse=True)
        return movers
    except Exception as e:
        log.exception("fetch_polygon_grouped error: %s", e)
        return []


def build_movers_text(movers, limit=20, min_price=0.3, min_pct=10.0, min_vol=0):
    if not movers:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ: ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Polygon)\n‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á /movers"
    lines = []
    lines.append("‚úÖ Top Movers (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
    lines.append(f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•{_fmt_num(min_pct,1)}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•{min_price} | Vol ‚â•{min_vol}")
    lines.append("üìà ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:")
    cnt = 0
    for m in movers:
        if m["pct"] >= min_pct and m["close"] >= min_price and (m["vol"] or 0) >= min_vol:
            lines.append(f"‚Ä¢ {m['ticker']} @{_fmt_num(m['close'])} ‚Äî pct +{_fmt_num(m['pct'],1)}%, Vol {_fmt_num(m['vol'],0)}")
            cnt += 1
            if cnt >= limit:
                break
    if cnt == 0:
        lines.append("‚Ä¢ (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå)")
    return "\n".join(lines)


def classify_signals(movers):
    """
    ‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢:
      - Strong CALL: pct >= +15% ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ High
      - Watch CALL : pct >= +7%
      - Strong PUT : pct <= -15% ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ Low
      - Watch PUT  : pct <= -7%
    (‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
    """
    if not movers:
        return {"sc": [], "wc": [], "sp": [], "wp": []}

    sc, wc, sp, wp = [], [], [], []
    for m in movers:
        c, h, l = m["close"], m.get("high"), m.get("low")
        pct = m["pct"]
        near_high = (h is not None and h != 0 and abs(h - c) <= max(0.02*h, 0.02))  # ~‡πÉ‡∏Å‡∏•‡πâ high
        near_low  = (l is not None and l != 0 and abs(c - l) <= max(0.02*l, 0.02))  # ~‡πÉ‡∏Å‡∏•‡πâ low

        if pct >= 15.0 and near_high:
            sc.append(m["ticker"])
        elif pct >= 7.0:
            wc.append(m["ticker"])
        elif pct <= -15.0 and near_low:
            sp.append(m["ticker"])
        elif pct <= -7.0:
            wp.append(m["ticker"])

    return {"sc": sc[:30], "wc": wc[:30], "sp": sp[:30], "wp": wp[:30]}

def build_signals_text(movers):
    if not movers:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏û‡∏¥‡∏°‡∏û‡πå /movers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    g = classify_signals(movers)
    lines = []
    lines.append("üß† ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)")
    lines.append(f"‚Ä¢ Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô: Strong CALL {len(g['sc'])} ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(g['sc'][:12]) or '-'}")
    lines.append(f"‚Ä¢ ‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô: Watch CALL {len(g['wc'])} ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(g['wc'][:12]) or '-'}")
    lines.append(f"‚Ä¢ Momentum ‡∏Ç‡∏≤‡∏•‡∏á: Strong PUT {len(g['sp'])} ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(g['sp'][:12]) or '-'}")
    lines.append(f"‚Ä¢ ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á: Watch PUT {len(g['wp'])} ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {', '.join(g['wp'][:12]) or '-'}")
    lines.append("")
    lines.append("üí° ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:")
    lines.append("‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô")
    lines.append("‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°")
    lines.append("‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô")
    lines.append("‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö")
    return "\n".join(lines)


# =========================
# Telegram (v20+)
# =========================
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n"
        "/movers ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)\n"
        "/signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT) ‡∏à‡∏≤‡∏Å movers\n"
        "/outlook ‚Äì ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡∏°‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        "/help ‚Äì ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n"
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: pct ‚â• 10.0%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• 0.30, Vol ‚â• 0"
    )
    await update.message.reply_text(text)

async def cmd_movers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...")
    date_ref = _yesterday_us()
    movers = fetch_polygon_grouped(date_ref)
    text = build_movers_text(movers, limit=30, min_price=0.30, min_pct=10.0, min_vol=0)
    await update.message.reply_text(text)

async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å movers (‡∏ü‡∏£‡∏µ: ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)...")
    date_ref = _yesterday_us()
    movers = fetch_polygon_grouped(date_ref)
    text = build_signals_text(movers)
    await update.message.reply_text(text)

async def cmd_outlook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_ref = _yesterday_us()
    movers = fetch_polygon_grouped(date_ref)
    g = classify_signals(movers)
    text = (
        f"üìü Outlook (‡∏≠‡∏¥‡∏á {date_ref})\n"
        f"‚Ä¢ Strong CALL: {len(g['sc'])} | Watch CALL: {len(g['wc'])}\n"
        f"‚Ä¢ Strong PUT : {len(g['sp'])} | Watch PUT : {len(g['wp'])}\n"
        f"‚Üí ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏£‡∏ß‡∏°: "
        f"{'‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô' if len(g['sc'])+len(g['wc']) > len(g['sp'])+len(g['wp']) else '‡∏Ç‡∏≤‡∏•‡∏á' if len(g['sp'])+len(g['wp']) > len(g['sc'])+len(g['wc']) else '‡∏Å‡∏•‡∏≤‡∏á'}\n\n"
        "‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏±‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏Å‡∏•‡∏∏‡πà‡∏° Strong, ‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏ô Watch"
    )
    await update.message.reply_text(text)

def build_telegram_app():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set.")
    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("help",    cmd_help))
    app_tg.add_handler(CommandHandler("start",   cmd_help))
    app_tg.add_handler(CommandHandler("movers",  cmd_movers))
    app_tg.add_handler(CommandHandler("signals", cmd_signals))
    app_tg.add_handler(CommandHandler("outlook", cmd_outlook))

    return app_tg

async def run_telegram():
    app_tg = build_telegram_app()
    log.info("Starting telegram long-polling‚Ä¶")
    await app_tg.run_polling(stop_signals=None)  # ‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ï‡∏≤‡∏¢


# =========================
# ENTRYPOINT (Thread approach)
# =========================
if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô Telegram bot ‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ event-loop ‡∏ö‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° (‡πÄ‡∏ä‡πà‡∏ô Render)
    def _bot_runner():
        try:
            asyncio.run(run_telegram())
        except Exception as e:
            log.exception("Telegram runner crashed: %s", e)

    if BOT_TOKEN:
        t = threading.Thread(target=_bot_runner, daemon=True)
        t.start()
        log.info("üöÄ Flask + Telegram bot started together")
    else:
        log.warning("üö´ BOT not started because BOT_TOKEN is missing")

    # ‡∏£‡∏±‡∏ô Flask ‡πÄ‡∏õ‡πá‡∏ô process ‡∏´‡∏•‡∏±‡∏Å
    app.run(host="0.0.0.0", port=PORT, debug=False)
