# -*- coding: utf-8 -*-
# Stock Signal Bot (Polygon Free plan: previous market day)
# - Pulls grouped aggs of the most recent trading day (yesterday or earlier if weekend)
# - Filters by % change, price, volume
# - Sends summary to Telegram
# - Runs periodically to avoid spamming free API

import os
import time
import json
import requests
from datetime import datetime, timedelta

# ========= ENV (Render ‚Üí Environment Variables) =========
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
CHAT_ID = os.environ.get("CHAT_ID", "").strip()
POLYGON_API_KEY = os.environ.get("POLYGON_API_KEY", "").strip()

# ========= BASIC SETTINGS (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö) =========
CHECK_INTERVAL_SEC = int(os.environ.get("CHECK_INTERVAL_SEC", "1800"))  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
ALERT_PCT = float(os.environ.get("ALERT_PCT", "10"))       # % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
MIN_PRICE = float(os.environ.get("MIN_PRICE", "0.30"))      # ‡∏Å‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î
MIN_VOLUME = int(os.environ.get("MIN_VOLUME", "0"))         # ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á volume ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 300000)
INCLUDE_LOSERS = os.environ.get("INCLUDE_LOSERS", "false").lower() == "true"  # ‡πÅ‡∏à‡πâ‡∏á‡∏ù‡∏±‡πà‡∏á‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏´‡∏°

# ========= SMALL UTILS =========
def tg(text: str):
    """Send a Telegram text message."""
    if not (BOT_TOKEN and CHAT_ID):
        print("Telegram env missing.")
        return
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": text}
        r = requests.post(url, json=payload, timeout=20)
        print("TG send:", r.status_code, r.text[:200])
    except Exception as e:
        print("TG error:", e)

def eastern_today_date():
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏¥‡∏ß‡∏¢‡∏≠‡∏£‡πå‡∏Å (EST/EDT)
    ‡πÉ‡∏ä‡πâ UTC-4 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á '‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤')
    """
    return (datetime.utcnow() - timedelta(hours=4)).date()

def prev_market_day():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ '‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏™‡∏≤‡∏£‡πå/‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)"""
    d = eastern_today_date() - timedelta(days=1)
    while d.weekday() >= 5:  # 5=Sat, 6=Sun
        d -= timedelta(days=1)
    return d

def fetch_grouped_aggs(day):
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å grouped aggs ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏ü‡∏£‡∏µ‡πÑ‡∏î‡πâ)"""
    date_str = day.isoformat()
    url = (
        f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/"
        f"{date_str}?adjusted=true&apiKey={POLYGON_API_KEY}"
    )
    r = requests.get(url, timeout=60)
    print("Polygon grouped:", r.status_code)
    try:
        data = r.json()
    except Exception:
        data = {"status": "ERR", "message": "invalid json", "raw": r.text[:300]}
    return data

def analyze(results):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå
    ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà Polygon ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÜ):
      T=ticker, o=open, c=close, v=volume, h=high, l=low
    """
    movers_up = []
    movers_dn = []

    for it in results or []:
        try:
            sym = it.get("T")
            o = float(it.get("o", 0) or 0)
            c = float(it.get("c", 0) or 0)
            v = int(it.get("v", 0) or 0)
            if not sym or o <= 0:
                continue
            price = c
            pct = (c - o) / o * 100.0

            # basic filters
            if price < MIN_PRICE:
                continue
            if v < MIN_VOLUME:
                continue

            rec = {
                "sym": sym,
                "price": price,
                "pct": pct,
                "vol": v,
                "open": o,
                "close": c
            }
            if pct >= ALERT_PCT:
                movers_up.append(rec)
            elif INCLUDE_LOSERS and (-pct) >= ALERT_PCT:
                movers_dn.append(rec)
        except Exception:
            continue

    # ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    movers_up.sort(key=lambda x: x["pct"], reverse=True)
    movers_dn.sort(key=lambda x: x["pct"], reverse=True)  # (‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏•‡∏á ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö)

    return movers_up, movers_dn

def fmt_list(items, label, limit=20):
    if not items:
        return f"‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ {label} ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
    lines = [f"‚Ä¢ {x['sym']}  {x['pct']:+.1f}%  @{x['price']:.2f}  Vol:{x['vol']:,}" for x in items[:limit]]
    return "\n".join(lines)

def run_once():
    if not POLYGON_API_KEY:
        tg("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö POLYGON_API_KEY ‡πÉ‡∏ô Environment Variables")
        return

    mday = prev_market_day()
    data = fetch_grouped_aggs(mday)

    status = data.get("status", "")
    if status != "OK":
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏ó‡∏ü‡∏£‡∏µ ‡∏Ç‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô NOT_AUTHORIZED
        msg = data.get("message", str(data)[:300])
        tg(f"‚ö†Ô∏è Polygon (free) ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {mday.isoformat()}\nstatus: {status}\nmessage: {msg}")
        return

    results = data.get("results", [])
    up, dn = analyze(results)

    header = f"‚úÖ Top Movers (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {mday.isoformat()}\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•{ALERT_PCT:.1f}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•{MIN_PRICE} | Vol ‚â•{MIN_VOLUME:,}\n"
    body_up = "üìà ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:\n" + fmt_list(up, "‡∏Ç‡∏∂‡πâ‡∏ô")
    if INCLUDE_LOSERS:
        body_dn = "\n\nüìâ ‡∏•‡∏á‡πÅ‡∏£‡∏á:\n" + fmt_list(dn, "‡∏•‡∏á")
    else:
        body_dn = ""
    tg(header + "\n" + body_up + body_dn)

# ========= Flask (‡πÉ‡∏´‡πâ UptimeRobot ‡πÄ‡∏Ñ‡∏≤‡∏∞) =========
from flask import Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot (Polygon Free) is running. Last market day: " + prev_market_day().isoformat()

def main_loop():
    # ‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
    try:
        tg("üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Polygon)")
        run_once()
    except Exception as e:
        tg(f"‚ùó Startup error: {e}")

    # ‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î API
    while True:
        try:
            time.sleep(CHECK_INTERVAL_SEC)
            run_once()
        except Exception as e:
            print("Loop error:", e)
            tg(f"‚ùó Loop error: {e}")
            time.sleep(60)

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô main loop ‡πÅ‡∏ö‡∏ö background ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Render ‡∏ü‡∏£‡∏µ‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏õ‡∏¢‡∏≤‡∏ß)
    # ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ UptimeRobot ‡πÄ‡∏Ñ‡∏≤‡∏∞
    import threading
    t = threading.Thread(target=main_loop, daemon=True)
    t.start()
    app.run(host="0.0.0.0", port=10000)
