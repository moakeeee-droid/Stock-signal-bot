# -*- coding: utf-8 -*-
# Stock Signal Bot (Render Web Service + Telegram Alert)
# - ‡∏™‡πÅ‡∏Å‡∏ô Top Movers ‡∏à‡∏≤‡∏Å Polygon
# - ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Telegram
# - ‡πÄ‡∏õ‡∏¥‡∏î Flask ‡∏´‡∏ô‡πâ‡∏≤ "/" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render/UptimeRobot ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ï‡∏•‡∏≠‡∏î

import os
import time
import requests
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask

# ========== ‡∏Ñ‡πà‡∏≤ Environment (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏ô Render -> Environment Variables) ==========
BOT_TOKEN        = os.environ["BOT_TOKEN"]          # ‡πÄ‡∏ä‡πà‡∏ô 8085xxxx:AA....
CHAT_ID          = os.environ["CHAT_ID"]            # ‡πÄ‡∏ä‡πà‡∏ô 5263482152
POLYGON_API_KEY  = os.environ["POLYGON_API_KEY"]    # ‡πÄ‡∏ä‡πà‡∏ô BqQ5kLFE0m...

# ========== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î) ==========
CHECK_INTERVAL_SEC = 60         # ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
ALERT_PCT          = 15.0       # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏Ç‡∏∂‡πâ‡∏ô)
INCLUDE_LOSERS     = False      # ‡πÅ‡∏à‡πâ‡∏á‡∏ù‡∏±‡πà‡∏á‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
MIN_PRICE          = 0.30       # ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
MIN_VOLUME         = 0          # ‡∏Å‡∏£‡∏≠‡∏á Volume (0 = ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á)
REPEAT_AFTER_MIN   = 60         # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á X ‡∏ô‡∏≤‡∏ó‡∏µ
SESSION_MODE       = "extended" # "regular" ‡∏´‡∏£‡∏∑‡∏≠ "extended" (‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)

# ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ==========
def tg(text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        r = requests.post(url, json={
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }, timeout=15)
        if r.status_code >= 400:
            print("TG send error:", r.status_code, r.text)
    except Exception as e:
        print("TG exception:", e)

# ========== ‡∏î‡∏∂‡∏á Top Movers ‡∏à‡∏≤‡∏Å Polygon ==========
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ snapshot gainers/losers
# ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö endpoint ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
def fetch_movers(kind="gainers"):
    """
    kind: "gainers" ‡∏´‡∏£‡∏∑‡∏≠ "losers"
    return: list[dict] -> [{sym, price, pct, volume}]
    """
    assert kind in ("gainers", "losers")

    url = f"https://api.polygon.io/v2/snapshot/locale/us/markets/stocks/{kind}"
    params = {"apiKey": POLYGON_API_KEY}

    try:
        r = requests.get(url, params=params, timeout=20)
        if r.status_code == 403:
            # API Key/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠
            print("Polygon 403 Forbidden:", r.text)
            return []
        r.raise_for_status()
        data = r.json()
    except Exception as e:
        print("Polygon request error:", e)
        return []

    items = []
    for t in (data.get("tickers") or []):
        sym = t.get("ticker") or "-"
        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        price = None
        last_trade = t.get("lastTrade") or {}
        if isinstance(last_trade, dict):
            price = last_trade.get("p")
        if price is None:
            # ‡∏ö‡∏≤‡∏á‡πÄ‡∏Ñ‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ lastTrade ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
            price = (t.get("day") or {}).get("c") or (t.get("prevDay") or {}).get("c") or 0.0

        # % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        pct = t.get("todaysChangePerc")
        if pct is None:
            day = t.get("day") or {}
            prev = (t.get("prevDay") or {}).get("c")
            cur = day.get("c")
            if prev and cur:
                try:
                    pct = (cur - prev) / prev * 100.0
                except Exception:
                    pct = 0.0
            else:
                pct = 0.0

        # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
        volume = (t.get("day") or {}).get("v") or 0

        items.append({
            "sym": sym,
            "price": float(price or 0),
            "pct": float(pct or 0),
            "volume": int(volume or 0),
        })

    return items

# ========== ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏á & ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ==========
def pass_filters(row: dict, up: bool):
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    if row["price"] < MIN_PRICE:
        return False
    # ‡∏Å‡∏£‡∏≠‡∏á volume
    if MIN_VOLUME and row["volume"] < MIN_VOLUME:
        return False
    # ‡∏Å‡∏£‡∏≠‡∏á % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if up:
        return row["pct"] >= ALERT_PCT
    else:
        return abs(row["pct"]) >= ALERT_PCT

def fmt_row(label: str, row: dict):
    return (
        f"{label} ‚ö° <b>{row['sym']}</b>\n"
        f"+{row['pct']:.1f}% | ${row['price']:.2f}\n"
        f"Vol: {row['volume']:,}\n"
        f"<i>mode: {SESSION_MODE} ‚Ä¢ {datetime.now().strftime('%H:%M:%S')}</i>"
    )

def fmt_row_down(label: str, row: dict):
    return (
        f"{label} üîª <b>{row['sym']}</b>\n"
        f"{row['pct']:.1f}% | ${row['price']:.2f}\n"
        f"Vol: {row['volume']:,}\n"
        f"<i>mode: {SESSION_MODE} ‚Ä¢ {datetime.now().strftime('%H:%M:%S')}</i>"
    )

# ========== ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ==========
def main():
    tg(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô Top Movers (‚â•{ALERT_PCT:.1f}% | mode: {SESSION_MODE})")
    last_alert_time = {}  # sym -> datetime ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

    while True:
        try:
            # ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
            ups = fetch_movers("gainers")
            hits = 0
            for row in ups:
                if not pass_filters(row, up=True):
                    continue
                sym = row["sym"]
                # ‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°: ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á X ‡∏ô‡∏≤‡∏ó‡∏µ
                tlast = last_alert_time.get(sym)
                if tlast and datetime.now() - tlast < timedelta(minutes=REPEAT_AFTER_MIN):
                    continue
                tg(fmt_row("Gainer", row))
                last_alert_time[sym] = datetime.now()
                hits += 1

            # ‡∏ù‡∏±‡πà‡∏á‡∏•‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            if INCLUDE_LOSERS:
                downs = fetch_movers("losers")
                for row in downs:
                    if not pass_filters(row, up=False):
                        continue
                    sym = row["sym"]
                    tlast = last_alert_time.get(sym)
                    if tlast and datetime.now() - tlast < timedelta(minutes=REPEAT_AFTER_MIN):
                        continue
                    tg(fmt_row_down("Loser", row))
                    last_alert_time[sym] = datetime.now()
                    hits += 1

            print(f"[{datetime.now().strftime('%H:%M:%S')}] hits: {hits}")
        except Exception as e:
            print("Loop error:", e)
            tg(f"‚ùó Scanner error: {e}")

        time.sleep(CHECK_INTERVAL_SEC)

# ========== Flask (‡∏ó‡∏≥‡πÉ‡∏´‡πâ Render/UptimeRobot ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ) ==========
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running fine."

def run_flask():
    # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 10000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UptimeRobot/Render ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏à‡∏≠
    app.run(host="0.0.0.0", port=10000)

# ========== Entry ==========
if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô Flask ‡πÄ‡∏õ‡πá‡∏ô thread ‡πÅ‡∏¢‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
    Thread(target=run_flask, daemon=True).start()
    main()
