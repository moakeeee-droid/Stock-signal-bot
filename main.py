import os
import logging
from datetime import datetime, timezone
from typing import Final

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# -----------------------
# Logging
# -----------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("stock-signal-bot")

# -----------------------
# Handlers (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ)
# -----------------------
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong üèì")

async def signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏∞‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏µ‡πÄ‡∏ó‡∏•‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
    text = "üü£ Signals (‡∏à‡∏≥‡∏•‡∏≠‡∏á)\nStrong CALL: 15 | Strong PUT: 22"
    await update.message.reply_text(text)

async def outlook(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "üìâ Outlook ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Å‡∏•‡∏≤‡∏á"
    await update.message.reply_text(text)

async def picks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏´‡πâ (PE, Float, ATR ‡∏Ø‡∏•‡∏Ø)
    text = "üìù Picks: BYND, KUKE, GSIT"
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üìä ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "/ping - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
        "/signals - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á\n"
        "/outlook - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î\n"
        "/picks - ‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à\n"
        "/help - ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

# -----------------------
# App builder
# -----------------------
def build_application() -> Application:
    bot_token: Final[str] = os.environ.get("BOT_TOKEN", "").strip()
    if not bot_token:
        raise RuntimeError("Missing BOT_TOKEN environment variable")

    app = Application.builder().token(bot_token).build()

    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("signals", signals))
    app.add_handler(CommandHandler("outlook", outlook))
    app.add_handler(CommandHandler("picks", picks))
    app.add_handler(CommandHandler("help", help_cmd))

    return app

# -----------------------
# Entrypoint (Webhook mode)
# -----------------------
def main() -> None:
    app = build_application()

    # Render ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ PORT ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏°‡∏≠ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô 10000)
    port = int(os.environ.get("PORT", "10000"))

    # Base URL ‡∏Ç‡∏≠‡∏á service (Render ‡∏Å‡∏≥‡∏´‡∏ô‡∏î RENDER_EXTERNAL_URL ‡∏°‡∏≤‡πÉ‡∏´‡πâ)
    public_url = (
        os.environ.get("PUBLIC_URL")
        or os.environ.get("RENDER_EXTERNAL_URL")
    )
    if not public_url:
        raise RuntimeError(
            "Missing PUBLIC_URL/RENDER_EXTERNAL_URL. "
            "Set PUBLIC_URL to your service URL (e.g. https://your-app.onrender.com)"
        )

    # ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ secret token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook
    secret_token = os.environ.get("WEBHOOK_SECRET", "").strip()
    if not secret_token:
        # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render ‚Üí Environment
        secret_token = "change-me-please"

    # path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook (‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà token ‡∏•‡∏á path)
    url_path = "webhook"

    webhook_url = f"{public_url.rstrip('/')}/{url_path}"

    log.info("Starting in WEBHOOK mode")
    log.info("time_utc: %s", datetime.now(timezone.utc).isoformat())
    log.info("PORT=%s | PUBLIC_URL=%s | WEBHOOK_PATH=/%s", port, public_url, url_path)

    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå aiohttp ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô PTB
    # PTB ‡∏à‡∏∞ setWebhook ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à header 'X-Telegram-Bot-Api-Secret-Token'
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=url_path,
        webhook_url=webhook_url,
        secret_token=secret_token,
        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏™‡πà cert/self-signed ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° param key/cert ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ô Render)
    )

if __name__ == "__main__":
    main()
