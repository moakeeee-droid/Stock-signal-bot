import os, time, json, traceback
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Tuple
import requests
from flask import Flask, request, jsonify

# ========= ENV =========
BOT_TOKEN = os.environ["BOT_TOKEN"]
CHAT_ID = os.environ.get("CHAT_ID", "").strip() or None
POLYGON_API_KEY = os.environ.get("POLYGON_API_KEY", "").strip()
PUBLIC_URL = os.environ.get("PUBLIC_URL", "").strip()  # https://<your>.onrender.com/set-webhook
PORT = int(os.environ.get("PORT", "10000"))

TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
HEADERS = {"User-Agent": "stock-signal-bot/1.0"}

# ========= FLASK =========
app = Flask(__name__)

# ========= UTIL: Telegram =========
def tg_send_text(text: str, chat_id: str = None, disable_web_page_preview: bool = True):
    cid = chat_id or CHAT_ID
    if not cid:
        return
    data = {
        "chat_id": cid,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": disable_web_page_preview,
    }
    try:
        requests.post(f"{TELEGRAM_API}/sendMessage", json=data, timeout=15)
    except Exception:
        pass

# ========= Polygon (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ: ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) =========
def polygon_grouped_prevday(date_iso: str) -> List[Dict]:
    """
    ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á '‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤' (free plan)
    date_iso = YYYY-MM-DD ‡∏Ç‡∏≠‡∏á '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö'‚ÄîAPI ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
    """
    url = (
        f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_iso}"
        f"?adjusted=true&apiKey={POLYGON_API_KEY}"
    )
    r = requests.get(url, headers=HEADERS, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"Polygon HTTP {r.status_code}: {r.text[:300]}")
    js = r.json()
    if js.get("status") != "OK":
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á error free plan: NOT_AUTHORIZED when same-day
        raise RuntimeError(f"Polygon status: {js.get('status')} {js.get('message')}")
    # fields: T(sym), o,h,l,c,v, vw, n (#trades), etc.
    return js.get("results", [])

def _fmt_num(n, digits=2):
    try:
        return f"{float(n):.{digits}f}"
    except Exception:
        return str(n)

def _yesterday_et() -> str:
    # ‡∏ï‡∏•‡∏≤‡∏î US ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á America/New_York; ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ UTC ‡∏•‡∏ö 4/5 ‡∏ä‡∏°. ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
    # ‡πÉ‡∏ä‡πâ yesterday UTC ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ API ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏≠‡∏á (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ endpoint ‡πÄ‡∏õ‡πá‡∏ô "grouped prev day")
    return (datetime.now(timezone.utc) - timedelta(days=1)).strftime("%Y-%m-%d")

# ========= ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô =========
def classify_signals_from_grouped(results: List[Dict]) -> Dict[str, List[Tuple]]:
    """
    ‡∏Ñ‡∏∑‡∏ô dict: {
      'watch_call': [(sym, pct, close, vol, notes), ...],
      'strong_call': [...],
      'watch_put': [...],
      'strong_put': [...]
    }
    ‡∏´‡∏•‡∏±‡∏Å ‡πÜ ‡πÉ‡∏ä‡πâ % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (c/o-1), close ‡πÉ‡∏Å‡∏•‡πâ high, ‡∏£‡∏π‡∏õ‡πÅ‡∏ó‡πà‡∏á (body) ‡∏Ø‡∏•‡∏Ø ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
    """
    out = {"watch_call": [], "strong_call": [], "watch_put": [], "strong_put": []}
    for it in results:
        sym = it.get("T")
        o, h, l, c = it.get("o"), it.get("h"), it.get("l"), it.get("c")
        v = it.get("v")
        if not all(x is not None for x in [o, h, l, c, v]): 
            continue
        if c <= 0 or v <= 0:
            continue

        pct = (c / o - 1.0) * 100.0 if o else 0.0
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ high / low
        near_high = (h - c) <= max(0.01, 0.02 * c)   # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ high
        near_low  = (c - l) <= max(0.01, 0.02 * c)   # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ low
        strong_body = abs(c - o) >= 0.6 * (h - l) if (h - l) > 0 else False

        price_ok = c >= 0.30
        vol_ok = v >= 1e5   # 100k ‡∏ä‡∏¥‡πâ‡∏ô (‡∏´‡∏¢‡∏≤‡∏ö ‡πÜ)

        if not (price_ok and vol_ok):
            continue

        note = []
        if near_high: note.append("close near H")
        if near_low:  note.append("close near L")
        if strong_body: note.append("strong body")
        notes = ", ".join(note) if note else ""

        row = (sym, pct, c, v, notes)

        # ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏∏‡πä‡∏õ
        if pct >= 7.0:
            # ‡∏ù‡∏±‡πà‡∏á CALL
            if near_high and strong_body:
                out["strong_call"].append(row)
            else:
                out["watch_call"].append(row)
        elif pct <= -7.0:
            # ‡∏ù‡∏±‡πà‡∏á PUT
            if near_low and strong_body:
                out["strong_put"].append(row)
            else:
                out["watch_put"].append(row)

    # ‡∏Ñ‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≠‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° % ‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    for k in out.keys():
        out[k].sort(key=lambda x: x[1], reverse=("call" in k))
    return out

def format_group(title_icon: str, title: str, rows: List[Tuple], limit: int = 20) -> str:
    if not rows:
        return f"{title_icon} <u>{title}</u>\n‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)\n"
    lines = [f"{title_icon} <u>{title}</u>"]
    for sym, pct, c, v, notes in rows[:limit]:
        line = f"‚Ä¢ <b>{sym}</b> @{_fmt_num(c, 2)} ‚Äî pct {_fmt_num(pct,1)}%, Vol {int(v):,}"
        if notes:
            line += f" ({notes})"
        lines.append(line)
    return "\n".join(lines) + "\n"

# ========= Intraday Picks (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤) =========
def make_intraday_picks(results: List[Dict]) -> Dict[str, List[str]]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î 'Intraday picks' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡πà‡∏≠:
    - buy_the_dip: ‡∏´‡∏∏‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á CALL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡πÅ‡∏£‡∏á (strong_call) ‚Üí ‡∏•‡∏∏‡πâ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏¢‡πà‡∏≠‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤
    - breakout_watch: ‡∏´‡∏∏‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á CALL ‡∏ó‡∏µ‡πà close near H (watch_call) ‚Üí ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏°
    - short_the_rip: ‡∏´‡∏∏‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á PUT ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡πÅ‡∏£‡∏á (strong_put) ‚Üí ‡πÄ‡∏î‡πâ‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ short
    - support_watch: ‡∏´‡∏∏‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á PUT (watch_put) ‚Üí ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö
    """
    groups = classify_signals_from_grouped(results)

    def pick_syms(rows: List[Tuple], n=12) -> List[str]:
        return [r[0] for r in rows[:n]]

    return {
        "buy_the_dip": pick_syms(groups["strong_call"]),
        "breakout_watch": pick_syms(groups["watch_call"]),
        "short_the_rip": pick_syms(groups["strong_put"]),
        "support_watch": pick_syms(groups["watch_put"]),
    }

def format_picks_block(picks: Dict[str, List[str]]) -> str:
    def line(name, syms, icon):
        if not syms: 
            return f"{icon} <u>{name}</u> ‚Äî (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢)\n"
        return f"{icon} <u>{name}</u>\n‚Ä¢ " + ", ".join(syms) + "\n"

    txt = "üß≠ <b>Intraday Picks (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)</b>\n"
    txt += line("BUY the dip", picks.get("buy_the_dip", []), "üü¢")
    txt += line("Breakout watch", picks.get("breakout_watch", []), "üü¢")
    txt += line("SHORT the rip", picks.get("short_the_rip", []), "üî¥")
    txt += line("Support watch", picks.get("support_watch", []), "üî¥")
    txt += "\nüí°‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: <i>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3‚Äì6 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏ô‡πÄ‡∏Ñ‡∏¢ / ‡∏°‡∏µ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏° / ‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏î‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á</i>"
    return txt

# ========= Top Movers (‡∏ü‡∏£‡∏µ) =========
def make_movers(results: List[Dict], min_pct=10.0, min_price=0.30, min_vol=0):
    winners = []
    for it in results:
        sym = it.get("T")
        o, h, l, c = it.get("o"), it.get("h"), it.get("l"), it.get("c")
        v = it.get("v")
        if not all(x is not None for x in [o, h, l, c, v]):
            continue
        if c < min_price or v < min_vol:
            continue
        pct = (c / o - 1.0) * 100.0 if o else 0.0
        if pct >= min_pct:
            winners.append((sym, pct, c, v))
    winners.sort(key=lambda x: x[1], reverse=True)
    return winners

def format_movers_block(winners: List[Tuple], ref_date: str) -> str:
    if not winners:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Top Movers ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå\n"
    lines = [f"‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: <b>{ref_date}</b>\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•10.0% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•0.3 | Vol ‚â•0\n", "üìà <u>‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:</u>"]
    for sym, pct, c, v in winners[:25]:
        lines.append(f"‚Ä¢ {sym} +{_fmt_num(pct,1)}% @{_fmt_num(c,2)}  Vol:{int(v):,}")
    return "\n".join(lines)

# ========= Handlers =========
HELP_TEXT = (
    "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n"
    "<b>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ</b>\n"
    "‚Ä¢ <b>/movers</b> ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ)\n"
    "‚Ä¢ <b>/signals</b> ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Watch/Strong (CALL/PUT)\n"
    "‚Ä¢ <b>/outlook</b> ‚Äì ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
    "‚Ä¢ <b>/picks</b> ‚Äì ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏≤‡πÄ‡∏î‡∏¢‡πå‡∏û‡∏¥‡∏Ñ‡∏™‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ (BUY dip / Breakout / SHORT / Support)\n"
    "\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: pct ‚â• 10.0%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• 0.30, Vol ‚â• 0"
)

def do_movers(chat_id=None):
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    winners = make_movers(results)
    tg_send_text(format_movers_block(winners, ref), chat_id)

def do_signals(chat_id=None):
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    groups = classify_signals_from_grouped(results)

    msgs = []
    msgs.append("üü¢ <b>Strong CALL</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b} @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["strong_call"][:20]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üü¢ <b>Watch CALL</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["watch_call"][:20]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üî¥ <b>Strong PUT</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["strong_put"][:20]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üî¥ <b>Watch PUT</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["watch_put"][:20]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    tg_send_text("\n\n".join(msgs), chat_id)

def do_outlook(chat_id=None):
    tg_send_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", chat_id)
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    picks = make_intraday_picks(results)

    # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß + ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î
    head = ("üîÆ <b>‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
            "‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô:</b> Strong CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {A}\n"
            "‚Ä¢ <b>‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô:</b> Watch CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {B}\n"
            "‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏•‡∏á:</b> Strong PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {C}\n"
            "‚Ä¢ <b>‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á:</b> Watch PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {D}\n\n"
            "üí° ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:\n"
            "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∏‡∏ô\n"
            "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°\n"
            "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô\n"
            "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö").format(
        A=", ".join(picks["buy_the_dip"][:12]) or "-",
        B=", ".join(picks["breakout_watch"][:12]) or "-",
        C=", ".join(picks["short_the_rip"][:12]) or "-",
        D=", ".join(picks["support_watch"][:12]) or "-",
    )

    tg_send_text(head, chat_id)

def do_picks(chat_id=None):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: /picks ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏≤‡πÄ‡∏î‡∏¢‡πå‡∏û‡∏¥‡∏Ñ‡∏™‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡πà‡∏≠"""
    tg_send_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", chat_id)
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    picks = make_intraday_picks(results)
    tg_send_text(format_picks_block(picks), chat_id)

# ========= Telegram Webhook =========
def handle_command(cmd: str, chat_id: str):
    try:
        if cmd == "/start" or cmd == "/help":
            tg_send_text(HELP_TEXT, chat_id)
        elif cmd == "/movers":
            do_movers(chat_id)
        elif cmd == "/signals":
            do_signals(chat_id)
        elif cmd == "/outlook":
            do_outlook(chat_id)
        elif cmd == "/picks":
            do_picks(chat_id)
        else:
            tg_send_text("‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", chat_id)
    except Exception as e:
        tg_send_text(f"‚ö†Ô∏è Error: {e}", chat_id)

@app.route("/set-webhook", methods=["GET"])
def set_webhook():
    # ‡∏ï‡∏±‡πâ‡∏á webhook ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PUBLIC_URL ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß)
    if not PUBLIC_URL:
        return "Set PUBLIC_URL env first", 400
    url = PUBLIC_URL
    r = requests.get(f"{TELEGRAM_API}/setWebhook", params={"url": url}, timeout=15)
    return jsonify(r.json())

@app.route("/", methods=["GET"])
def home():
    return "Bot is running fine."

@app.route("/set-webhook", methods=["POST"])
def webhook():
    try:
        update = request.get_json(force=True)
        msg = update.get("message") or update.get("edited_message") or {}
        chat_id = str(((msg.get("chat") or {}).get("id", "")))
        text = (msg.get("text") or "").strip()
        if not text:
            return "OK"
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å)
        cmd = text.split()[0].lower()
        handle_command(cmd, chat_id)
    except Exception:
        traceback.print_exc()
    return "OK"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)
