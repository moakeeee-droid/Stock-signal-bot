# main.py
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
import signal
from datetime import datetime, timezone

from aiohttp import web
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# =========================
# Logging
# =========================
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("stock-signal-bot")


# =========================
# Telegram command handlers
# =========================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "/ping - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
        "/signals - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)\n"
        "/outlook - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
        "/picks - ‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "/movers - ‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏î‡πà‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
    )
    await update.message.reply_text(text)


async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong üèì")


async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á
    # (‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ)
    strong_call = 15
    strong_put = 22
    msg = f"üîÆ Signals (‡∏à‡∏≥‡∏•‡∏≠‡∏á)\nStrong CALL: {strong_call} | Strong PUT: {strong_put}"
    await update.message.reply_text(msg)


async def cmd_outlook(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° outlook
    await update.message.reply_text("üìà Outlook ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÜ")


async def _format_pick_detail(symbol: str) -> str:
    # ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô placeholder; ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Yahoo/Finhub ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    # ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
    return f"‚ö†Ô∏è {symbol}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"


async def cmd_picks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
    picks = ["BYND", "KUKE", "GSIT"]
    await update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô...")

    details = [await _format_pick_detail(s) for s in picks]
    header = "üßæ Picks (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)\n"
    await update.message.reply_text(header + "\n".join(details))


async def cmd_movers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (placeholder)
    await update.message.reply_text("üìä Movers: (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) AAPL, NVDA, TSLA")


# =========================
# aiohttp healthcheck server
# =========================
async def handle_root(request: web.Request) -> web.Response:
    now = datetime.now(timezone.utc).isoformat()
    return web.Response(text=f"‚úÖ Bot is running ‚Äî {now}\n", content_type="text/plain")


def build_web_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/", handle_root)
    app.router.add_get("/health", handle_root)
    return app


# =========================
# Telegram bot lifecycle (Polling ‡πÅ‡∏ö‡∏ö async)
# =========================
async def bot_run(application: Application, stop_event: asyncio.Event) -> None:
    """
    ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏≥‡∏î‡∏±‡∏ö initialize -> start -> updater.start_polling()
    ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å run_polling() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î event loop ‡∏ã‡πâ‡∏≥
    """
    log.info("Starting Telegram bot (polling mode)")
    await application.initialize()
    await application.start()
    await application.updater.start_polling(drop_pending_updates=True)

    # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î
    await stop_event.wait()

    log.info("Stopping Telegram bot...")
    await application.updater.stop()
    await application.stop()
    await application.shutdown()
    log.info("Telegram bot stopped")


# =========================
# Main entry
# =========================
async def main_async():
    bot_token = os.environ.get("BOT_TOKEN")
    if not bot_token:
        raise RuntimeError("Environment variable BOT_TOKEN is required")

    port = int(os.environ.get("PORT", "10000"))
    log.info("Config | PORT=%s", port)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Telegram Application ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡∏Å handler
    application = Application.builder().token(bot_token).build()
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("ping", cmd_ping))
    application.add_handler(CommandHandler("signals", cmd_signals))
    application.add_handler(CommandHandler("outlook", cmd_outlook))
    application.add_handler(CommandHandler("picks", cmd_picks))
    application.add_handler(CommandHandler("movers", cmd_movers))

    # stop_event ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á web ‡πÅ‡∏•‡∏∞ bot ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    stop_event = asyncio.Event()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á aiohttp app ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö healthcheck ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡πâ Render ‡πÄ‡∏´‡πá‡∏ô
    web_app = build_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    log.info("HTTP server started on 0.0.0.0:%d", port)

    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì OS (SIGINT/SIGTERM) ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏á‡∏≤‡∏ô‡∏™‡∏ß‡∏¢ ‡πÜ
    loop = asyncio.get_running_loop()

    def _graceful_stop():
        if not stop_event.is_set():
            log.info("Shutdown signal received")
            stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, _graceful_stop)
        except NotImplementedError:
            # ‡∏ö‡∏≤‡∏á‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏ä‡πà‡∏ô Windows) ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            pass

    # ‡∏£‡∏±‡∏ô Telegram bot ‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏Ç‡∏ô‡∏≤‡∏ô
    bot_task = asyncio.create_task(bot_run(application, stop_event), name="tg-bot")

    # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î
    try:
        await bot_task
    finally:
        # ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        await runner.cleanup()
        log.info("HTTP server stopped")

    log.info("Application terminated")


def main():
    # ‡πÉ‡∏ä‡πâ asyncio.run ‡πÄ‡∏õ‡πá‡∏ô entrypoint ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏Ñ‡∏∏‡∏° event loop ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    asyncio.run(main_async())


if __name__ == "__main__":
    main()
