# -*- coding: utf-8 -*-
"""
Stock Signal Bot (Render + Telegram long-polling)
- ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö PTB 21.x
- ‡πÅ‡∏¢‡∏Å Telegram ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Flask ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
"""

import os
import logging
import threading
import inspect
from datetime import datetime
from flask import Flask, jsonify
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# =============== CONFIG ===============
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
PORT = int(os.getenv("PORT", "10000"))
if not BOT_TOKEN:
    raise RuntimeError("‚ùå Missing BOT_TOKEN environment variable")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("stock-signal-bot")

# =============== FLASK ===============
flask_app = Flask(__name__)

@flask_app.get("/")
def home():
    return "‚úÖ Stock Signal Bot is running", 200

@flask_app.get("/healthz")
def health():
    return jsonify({"status": "ok", "time": datetime.utcnow().isoformat()}), 200

# =============== TELEGRAM COMMANDS ===============
HELP_TEXT = (
    "üìä ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
    "/ping - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó\n"
    "/signals - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á\n"
    "/outlook - ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î\n"
    "/picks - ‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à\n"
    "/help - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ"
)

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong üèì")

async def cmd_signals(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÆ Signals (‡∏à‡∏≥‡∏•‡∏≠‡∏á)\nStrong CALL: 15 | Strong PUT: 22")

async def cmd_outlook(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìà Outlook ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏Å‡∏•‡∏≤‡∏á")

async def cmd_picks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù Picks: BYND, KUKE, GSIT")

# =============== TELEGRAM APP ===============
def build_telegram():
    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()
    app_tg.add_handler(CommandHandler("help", cmd_help))
    app_tg.add_handler(CommandHandler("start", cmd_help))
    app_tg.add_handler(CommandHandler("ping", cmd_ping))
    app_tg.add_handler(CommandHandler("signals", cmd_signals))
    app_tg.add_handler(CommandHandler("outlook", cmd_outlook))
    app_tg.add_handler(CommandHandler("picks", cmd_picks))
    return app_tg

def run_telegram():
    import asyncio
    app_tg = build_telegram()
    log.info("üöÄ Starting telegram long-polling‚Ä¶")

    sig = inspect.signature(app_tg.run_polling).parameters
    kwargs = {}
    if "close_loop" in sig:
        kwargs["close_loop"] = True
    if "handle_signals" in sig:
        kwargs["handle_signals"] = False

    asyncio.run(app_tg.run_polling(**kwargs))

# =============== ENTRYPOINT ===============
if __name__ == "__main__":
    log.info("Starting Flask + Telegram bot")
    threading.Thread(target=run_telegram, daemon=True).start()
    flask_app.run(host="0.0.0.0", port=PORT)
