# Stock-signal bot (Render friendly, async)
# Features: /movers /signals /outlook /picks /setrules /rules /subscribe /unsubscribe
# Data source: Polygon.io (free mode uses previous trading day)
# Env: BOT_TOKEN, POLYGON_API_KEY, CHAT_ID(optional), PORT

import os
import io
import re
import json
import math
import time
import asyncio
import logging
import datetime as dt
from typing import List, Dict, Tuple, Optional, Set

import requests
from flask import Flask
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# =========================
# ENV & CONFIG
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY", "").strip()
DEFAULT_CHAT_ID = os.getenv("CHAT_ID", "").strip()  # optional broadcast default
PORT = int(os.environ.get("PORT", 10000))

# runtime rules (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô /setrules)
RULES = {
    "pct_min": 10.0,    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ %change
    "price_min": 0.30,  # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤
    "vol_min": 0,       # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
}

# subscribers (in-memory)
SUBSCRIBERS: Set[int] = set()
if DEFAULT_CHAT_ID.isdigit():
    SUBSCRIBERS.add(int(DEFAULT_CHAT_ID))

# =========================
# LOGGING
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("stock-signal-bot")

# =========================
# FLASK (healthcheck)
# =========================
app = Flask(__name__)

@app.route("/")
def home():
    return "Stock-signal bot is alive ‚úÖ"


# =========================
# UTILS
# =========================
def last_trading_day_usa(today_utc: Optional[dt.date] = None) -> dt.date:
    """‡∏´‡∏≤ 'last trading day' ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏à.-‡∏®.)"""
    d = today_utc or dt.datetime.utcnow().date()
    d -= dt.timedelta(days=1)
    while d.weekday() > 4:  # 5,6 = Sat, Sun
        d -= dt.timedelta(days=1)
    return d

def fmt_num(n: Optional[float], p: int = 2) -> str:
    if n is None:
        return "-"
    try:
        s = f"{n:,.{p}f}"
        if p == 0:
            s = s.split(".")[0]
        return s
    except Exception:
        return str(n)

def near_high(c: float, h: float, tol: float = 0.02) -> bool:
    return h > 0 and (h - c) / h <= tol

def near_low(c: float, l: float, tol: float = 0.02) -> bool:
    return l > 0 and (c - l) / l <= tol

def bullish(o: float, c: float) -> bool:
    return c > o

def bearish(o: float, c: float) -> bool:
    return c < o

def parse_kv_args(text: str) -> Dict[str, float]:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'pct=8 price=0.5 vol=200000' ‡πÄ‡∏õ‡πá‡∏ô dict"""
    out = {}
    for m in re.finditer(r"(\w+)\s*=\s*([0-9]*\.?[0-9]+)", text):
        k, v = m.group(1).lower(), float(m.group(2))
        out[k] = v
    return out


# =========================
# DATA (Polygon free mode)
# =========================
def fetch_polygon_grouped(date_: dt.date, retries: int = 3) -> Tuple[Optional[List[Dict]], str]:
    """‡∏î‡∏∂‡∏á grouped bars ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (free) ‡∏û‡∏£‡πâ‡∏≠‡∏° backoff"""
    if not POLYGON_API_KEY:
        return None, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ POLYGON_API_KEY ‡πÉ‡∏ô Render"

    url = (
        f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/"
        f"{date_.isoformat()}?adjusted=true&apiKey={POLYGON_API_KEY}"
    )
    delay = 2
    for i in range(retries):
        try:
            r = requests.get(url, timeout=30)
            if r.status_code == 429:
                if i < retries - 1:
                    time.sleep(delay)
                    delay *= 2
                    continue
                return None, "429 Too Many Requests (‡∏ä‡∏ô rate limit ‚Äì ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)"
            if r.status_code >= 400:
                return None, f"Polygon error {r.status_code}: {r.text[:200]}"
            data = r.json()
            results = data.get("results")
            if not results:
                return None, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Polygon (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"
            return results, ""
        except Exception as e:
            if i < retries - 1:
                time.sleep(delay)
                delay *= 2
                continue
            return None, f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Polygon ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}"
    return None, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"

def filter_movers(rows: List[Dict]) -> List[Dict]:
    """‡∏Ñ‡∏±‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏° RULES"""
    pct_min = float(RULES["pct_min"])
    price_min = float(RULES["price_min"])
    vol_min = float(RULES["vol_min"])

    out = []
    for x in rows:
        try:
            sym = x.get("T")
            o = float(x.get("o", 0))
            h = float(x.get("h", 0))
            l = float(x.get("l", 0))
            c = float(x.get("c", 0))
            v = float(x.get("v", 0))
            if c <= 0 or h <= 0 or l <= 0:
                continue
            pct = (c - o) / o * 100 if o > 0 else 0.0
            if sym and c >= price_min and v >= vol_min and abs(pct) >= pct_min:
                out.append(dict(T=sym, o=o, h=h, l=l, c=c, v=v, pct=pct))
        except Exception:
            continue
    out.sort(key=lambda r: abs(r["pct"]), reverse=True)
    return out

def classify_signals(rows: List[Dict]) -> Dict[str, List[Dict]]:
    """‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch ‚Äî CALL/PUT"""
    buckets = {"STRONG_CALL": [], "WATCH_CALL": [], "STRONG_PUT": [], "WATCH_PUT": []}
    for r in rows:
        o, h, l, c, pct = r["o"], r["h"], r["l"], r["c"], r["pct"]
        if pct >= 15 and near_high(c, h, 0.02) and bullish(o, c):
            buckets["STRONG_CALL"].append(r)
        elif pct >= 5 and near_high(c, h, 0.02):
            buckets["WATCH_CALL"].append(r)
        elif pct <= -15 and near_low(c, l, 0.02) and bearish(o, c):
            buckets["STRONG_PUT"].append(r)
        elif pct <= -5 and near_low(c, l, 0.02):
            buckets["WATCH_PUT"].append(r)
    for k in buckets:
        buckets[k] = buckets[k][:50]
    return buckets

def score_daytrade_call(r: Dict) -> float:
    """‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ CALL intraday ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢"""
    # ‡πÉ‡∏Å‡∏•‡πâ High + ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß + pct ‡∏™‡∏π‡∏á + volume ‡∏™‡∏π‡∏á
    s = 0.0
    if bullish(r["o"], r["c"]): s += 1.0
    if near_high(r["c"], r["h"], 0.015): s += 1.0
    s += max(0.0, r["pct"]/10)               # 10% => +1
    s += math.log10(max(r["v"], 1)) / 10.0   # ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    return s

def score_daytrade_put(r: Dict) -> float:
    """‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ PUT intraday ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢"""
    s = 0.0
    if bearish(r["o"], r["c"]): s += 1.0
    if near_low(r["c"], r["l"], 0.015): s += 1.0
    s += max(0.0, (-r["pct"])/10)            # -10% => +1
    s += math.log10(max(r["v"], 1)) / 10.0
    return s

def format_symbol_line(r: Dict) -> str:
    return f"‚Ä¢ <b>{r['T']}</b> @{fmt_num(r['c'],2)} ‚Äî pct {fmt_num(r['pct'],1)}%, Vol {fmt_num(r['v'],0)}"

def fmt_group(title: str, rows: List[Dict]) -> str:
    if not rows:
        return f"{title}\n(‡∏ß‡πà‡∏≤‡∏á)"
    return title + "\n" + "\n".join(format_symbol_line(r) for r in rows)


# =========================
# TELEGRAM COMMANDS
# =========================
def rules_text() -> str:
    return (f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: pct ‚â• {RULES['pct_min']:.1f}%, "
            f"‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• {RULES['price_min']}, Vol ‚â• {fmt_num(RULES['vol_min'],0)}")

HELP_TEXT = (
    "ü§ñ <b>Stock Signal Bot</b>\n"
    "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
    "‚Ä¢ /movers ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
    "‚Ä¢ /signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT)\n"
    "‚Ä¢ /outlook ‚Äì ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
    "‚Ä¢ /picks ‚Äì ‡∏Ñ‡∏±‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‚Äì‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (CALL/PUT ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞ 5)\n"
    "‚Ä¢ /setrules pct=8 price=0.5 vol=200000 ‚Äì ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á\n"
    "‚Ä¢ /rules ‚Äì ‡∏î‡∏π‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n"
    "‚Ä¢ /subscribe ‚Äì ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n"
    "‚Ä¢ /unsubscribe ‚Äì ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n"
    f"\n{rules_text()}"
)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã\n" + HELP_TEXT)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(HELP_TEXT)

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(rules_text())

async def cmd_setrules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = " ".join(context.args) if context.args else ""
    if not args and update.message:
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á args
        parts = update.message.text.split(maxsplit=1)
        if len(parts) == 2:
            args = parts[1]
    if not args:
        await update.message.reply_text("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: /setrules pct=8 price=0.5 vol=200000")
        return
    kv = parse_kv_args(args)
    changed = []
    if "pct" in kv or "pct_min" in kv:
        RULES["pct_min"] = float(kv.get("pct", kv.get("pct_min")))
        changed.append(f"pct={RULES['pct_min']}")
    if "price" in kv or "price_min" in kv:
        RULES["price_min"] = float(kv.get("price", kv.get("price_min")))
        changed.append(f"price={RULES['price_min']}")
    if "vol" in kv or "vol_min" in kv:
        RULES["vol_min"] = float(kv.get("vol", kv.get("vol_min")))
        changed.append(f"vol={fmt_num(RULES['vol_min'],0)}")
    if not changed:
        await update.message.reply_text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (pct, price, vol)")
        return
    await update.message.reply_text("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: " + ", ".join(changed))

async def _load_rows_and_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[List[Dict]]:
    ref_day = last_trading_day_usa()
    await update.message.reply_html(f"‚åõÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon (‡∏≠‡∏¥‡∏á {ref_day})‚Ä¶")
    rows, err = fetch_polygon_grouped(ref_day)
    if err:
        await update.message.reply_text(f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢: {err}")
        return None
    movers = filter_movers(rows)
    if not movers:
        await update.message.reply_text("‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå")
        return None
    context.user_data["ref_day"] = ref_day
    return movers

async def cmd_movers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movers = await _load_rows_and_reply(update, context)
    if movers is None: return
    ref_day = context.user_data.get("ref_day")
    up = [r for r in movers if r["pct"] > 0][:20]
    dn = [r for r in movers if r["pct"] < 0][:20]
    text = (
        f"‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏≠‡∏¥‡∏á {ref_day})\n"
        f"{rules_text()}\n\n"
        + fmt_group("üìà ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:", up) + "\n\n"
        + fmt_group("üìâ ‡∏•‡∏á‡πÅ‡∏£‡∏á:", dn)
    )
    await update.message.reply_html(text, disable_web_page_preview=True)

async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movers = await _load_rows_and_reply(update, context)
    if movers is None: return
    ref_day = context.user_data.get("ref_day")
    buckets = classify_signals(movers)
    txt = [
        f"üîÆ <b>‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> (‡∏≠‡∏¥‡∏á {ref_day})",
        fmt_group("üíö <u>Strong CALL</u>", buckets["STRONG_CALL"]),
        fmt_group("üíö <u>Watch CALL</u>", buckets["WATCH_CALL"]),
        fmt_group("üî¥ <u>Strong PUT</u>", buckets["STRONG_PUT"]),
        fmt_group("üî¥ <u>Watch PUT</u>", buckets["WATCH_PUT"]),
        "\nüí° ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:\n"
        "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏∏‡∏ô\n"
        "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°\n"
        "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô\n"
        "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö"
    ]
    await update.message.reply_html("\n\n".join(txt), disable_web_page_preview=True)

async def cmd_outlook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movers = await _load_rows_and_reply(update, context)
    if movers is None: return
    ref_day = context.user_data.get("ref_day")
    buckets = classify_signals(movers)
    c1 = len(buckets["STRONG_CALL"]); c2 = len(buckets["WATCH_CALL"])
    p1 = len(buckets["STRONG_PUT"]);  p2 = len(buckets["WATCH_PUT"])
    bias = "‡∏Å‡∏•‡∏≤‡∏á"
    if c1 + c2 > p1 + p2: bias = "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ö‡∏ß‡∏Å"
    elif c1 + c2 < p1 + p2: bias = "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏•‡∏ö"
    text = (
        f"üìä <b>Outlook</b> (‡∏≠‡∏¥‡∏á {ref_day})\n"
        f"‚Ä¢ Strong CALL: {c1} | Watch CALL: {c2}\n"
        f"‚Ä¢ Strong PUT: {p1} | Watch PUT: {p2}\n"
        f"‚Üí <b>‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏£‡∏ß‡∏°:</b> {bias}\n\n"
        "‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏±‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏Å‡∏•‡∏∏‡πà‡∏° Strong, ‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏ô Watch"
    )
    await update.message.reply_html(text)

async def cmd_picks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    movers = await _load_rows_and_reply(update, context)
    if movers is None: return
    ref_day = context.user_data.get("ref_day")

    # ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ scoring
    ups = sorted([r for r in movers if r["pct"] > 0], key=score_daytrade_call, reverse=True)[:5]
    dns = sorted([r for r in movers if r["pct"] < 0], key=score_daytrade_put, reverse=True)[:5]

    def idea_call(r):
        return f"{r['T']} ‚Äî ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ High ‡πÄ‡∏î‡∏¥‡∏° {fmt_num(r['h'],2)} ‡∏ß‡∏≤‡∏á cut ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏∏‡∏î {fmt_num(r['o'],2)}"
    def idea_put(r):
        return f"{r['T']} ‚Äî ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢: ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏∏‡∏î Low ‡πÄ‡∏î‡∏¥‡∏° {fmt_num(r['l'],2)} ‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô {fmt_num(r['o'],2)} ‡∏Ñ‡∏±‡∏ó"

    text = (
        f"üéØ <b>Day-trade Picks</b> (‡∏≠‡∏¥‡∏á {ref_day})\n{rules_text()}\n\n"
        "üíö <u>CALL candidates</u>\n" +
        "\n".join([f"‚Ä¢ {idea_call(r)} | pct {fmt_num(r['pct'],1)}%, Vol {fmt_num(r['v'],0)}" for r in ups]) +
        "\n\nüî¥ <u>PUT candidates</u>\n" +
        "\n".join([f"‚Ä¢ {idea_put(r)} | pct {fmt_num(r['pct'],1)}%, Vol {fmt_num(r['v'],0)}" for r in dns]) +
        "\n\n‚ö†Ô∏è ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Äî ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
    )
    await update.message.reply_html(text, disable_web_page_preview=True)

# --- subscribe / unsubscribe + jobqueue broadcast ---
async def cmd_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    SUBSCRIBERS.add(chat_id)
    await update.message.reply_text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚Äî ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏á‡∏≤‡∏ô")

async def cmd_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in SUBSCRIBERS:
        SUBSCRIBERS.remove(chat_id)
        await update.message.reply_text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
    else:
        await update.message.reply_text("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡∏ö")

async def job_broadcast(context: ContextTypes.DEFAULT_TYPE):
    """‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 60 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô)"""
    if not SUBSCRIBERS:
        return
    ref_day = last_trading_day_usa()
    rows, err = fetch_polygon_grouped(ref_day)
    if err:
        return
    movers = filter_movers(rows)
    if not movers:
        return
    buckets = classify_signals(movers)
    c1, c2 = len(buckets["STRONG_CALL"]), len(buckets["WATCH_CALL"])
    p1, p2 = len(buckets["STRONG_PUT"]), len(buckets["WATCH_PUT"])
    bias = "‡∏Å‡∏•‡∏≤‡∏á"
    if c1 + c2 > p1 + p2: bias = "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏ö‡∏ß‡∏Å"
    elif c1 + c2 < p1 + p2: bias = "‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏•‡∏ö"
    msg = (f"‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏≠‡∏¥‡∏á {ref_day}) ‚Äî Strong CALL {c1}, Watch CALL {c2}, "
           f"Strong PUT {p1}, Watch PUT {p2} ‚Üí ‡πÇ‡∏ó‡∏ô {bias}")
    for cid in list(SUBSCRIBERS):
        try:
            await context.bot.send_message(cid, msg)
        except Exception:
            # ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô user block) ‡∏Å‡πá‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
            SUBSCRIBERS.discard(cid)

# =========================
# RUN TELEGRAM (async)
# =========================
async def run_telegram():
    if not BOT_TOKEN:
        log.error("BOT_TOKEN not set in environment")
        return
    app_tg = ApplicationBuilder().token(BOT_TOKEN).build()

    app_tg.add_handler(CommandHandler("start", cmd_start))
    app_tg.add_handler(CommandHandler("help", cmd_help))
    app_tg.add_handler(CommandHandler("rules", cmd_rules))
    app_tg.add_handler(CommandHandler("setrules", cmd_setrules))
    app_tg.add_handler(CommandHandler("movers", cmd_movers))
    app_tg.add_handler(CommandHandler("signals", cmd_signals))
    app_tg.add_handler(CommandHandler("outlook", cmd_outlook))
    app_tg.add_handler(CommandHandler("picks", cmd_picks))
    app_tg.add_handler(CommandHandler("subscribe", cmd_subscribe))
    app_tg.add_handler(CommandHandler("unsubscribe", cmd_unsubscribe))

    # jobqueue ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏∏‡∏Å 60 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
    app_tg.job_queue.run_repeating(job_broadcast, interval=60*60, first=60*5)

    log.info("Starting telegram long-polling‚Ä¶")
    await app_tg.run_polling(stop_signals=None)

# =========================
# ENTRYPOINT
# =========================
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_telegram())
    app.run(host="0.0.0.0", port=PORT, debug=False)
