# -*- coding: utf-8 -*-
"""
Stock Signal Bot (Free mode with Polygon.io previous-day data)
- /help       : ‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
- /movers     : Top movers (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
- /signals    : ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT) + ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
- /outlook    : ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
- health      : ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Flask + webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render

‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á ENV ‡∏ö‡∏ô Render:
BOT_TOKEN, POLYGON_API_KEY, PUBLIC_URL, PORT
(‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) CHAT_ID  ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å broadcast ‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import os
import json
import time
import math
import logging
import traceback
from datetime import datetime, timedelta, timezone

import requests
from flask import Flask, request, jsonify
from telegram import Update, ParseMode
from telegram.ext import (
    Updater, Dispatcher, CommandHandler, CallbackContext
)

# -------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger --------------------
logger = logging.getLogger("stock-bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# -------------------- ENV --------------------
BOT_TOKEN = os.environ["BOT_TOKEN"]
POLYGON_API_KEY = os.environ["POLYGON_API_KEY"]
PUBLIC_URL = os.environ["PUBLIC_URL"]  # eg. https://your-app.onrender.com
PORT = int(os.environ.get("PORT", "10000"))
DEFAULT_CHAT_ID = os.environ.get("CHAT_ID")  # optional

# ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å)
DEFAULT_MIN_PCT   = 10.0   # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (%) ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
DEFAULT_MIN_PRICE = 0.30   # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
DEFAULT_MIN_VOL   = 0      # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

# -------------------- Utilities --------------------
def _fmt_num(x, nd=2):
    try:
        if x is None: return "-"
        if isinstance(x, (int, float)):
            if abs(x) >= 1e9:  # billions
                return f"{x/1e9:.{nd}f}B"
            if abs(x) >= 1e6:  # millions
                return f"{x/1e6:.{nd}f}M"
            if abs(x) >= 1e3:  # thousands
                return f"{x/1e3:.{nd}f}K"
            return f"{x:.{nd}f}".rstrip("0").rstrip(".")
        return str(x)
    except:
        return str(x)

def _chunk_send(bot, chat_id, text, preview=False):
    CHUNK = 3900
    if len(text) <= CHUNK:
        bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, disable_web_page_preview=not preview)
    else:
        for i in range(0, len(text), CHUNK):
            bot.send_message(chat_id, text[i:i+CHUNK], parse_mode=ParseMode.HTML, disable_web_page_preview=not preview)

def _us_prev_trading_date_rough():
    # ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß: ‡πÄ‡∏≠‡∏≤ "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô" ‡∏Ç‡∏≠‡∏á UTC (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ Polygon ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á T-1)
    return (datetime.utcnow().date() - timedelta(days=1)).isoformat()

# -------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Polygon (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ: previous-day grouped) --------------------
def polygon_grouped_day(date_iso):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å grouped aggs (T-1) ‡∏à‡∏≤‡∏Å Polygon (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô')
    """
    url = f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_iso}"
    params = {
        "adjusted": "true",
        "apiKey": POLYGON_API_KEY
    }
    r = requests.get(url, params=params, timeout=30)
    if r.status_code != 200:
        raise RuntimeError(f"Polygon {r.status_code}: {r.text}")
    data = r.json()
    if data.get("status") != "OK":
        # ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ NOT_AUTHORIZED
        # ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô
        raise RuntimeError(data.get("message") or str(data))
    return data.get("results", [])

def fetch_top_movers_free(date_iso=None, min_pct=DEFAULT_MIN_PCT, min_price=DEFAULT_MIN_PRICE, min_vol=DEFAULT_MIN_VOL):
    """
    ‡∏Ñ‡∏∑‡∏ô list ‡∏Ç‡∏≠‡∏á dict ‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô: { 'T':symbol, 'o','h','l','c','v','pct','close_near_high','close_near_low' }
    ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    """
    if not date_iso:
        date_iso = _us_prev_trading_date_rough()

    try:
        rows = polygon_grouped_day(date_iso)
    except Exception as e:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ NOT_AUTHORIZED ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏≠‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏¢‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ß‡∏±‡∏ô
        logger.warning("Primary fetch failed (%s), retry with date-1", e)
        d = (datetime.fromisoformat(date_iso) - timedelta(days=1)).date().isoformat()
        rows = polygon_grouped_day(d)
        date_iso = d

    out = []
    for r in rows:
        # polygon fields: T=Ticker, o=open, h=high, l=low, c=close, v=volume
        T = r.get("T")
        o = r.get("o")
        h = r.get("h")
        l = r.get("l")
        c = r.get("c")
        v = r.get("v")
        if not (T and o and c and h and l and v is not None):
            continue
        if o <= 0 or c <= 0:
            continue

        price_ok = c >= min_price
        vol_ok   = (v or 0) >= min_vol
        pct = (c - o) * 100.0 / o
        pct_ok = abs(pct) >= min_pct

        if price_ok and vol_ok and pct_ok:
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ High/Low
            near_high = (h > 0 and (h - c) / h <= 0.02)  # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ High <=2%
            near_low  = (l > 0 and (c - l) / max(c, 1e-9) <= 0.02)  # ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ Low <=2%
            out.append({
                "T": T, "o": o, "h": h, "l": l, "c": c, "v": v,
                "pct": pct,
                "close_near_high": near_high,
                "close_near_low": near_low
            })
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡πà‡∏ô‡∏™‡∏∏‡∏î (‡πÄ‡∏≠‡∏≤‡∏ù‡∏±‡πà‡∏á‡∏ö‡∏ß‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
    out.sort(key=lambda x: (-x["pct"], -x["v"]))
    return out

# -------------------- ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì --------------------
def build_signals_from_day(rows, header=""):
    """
    ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Strong CALL / Watch CALL / Strong PUT / Watch PUT
    criteria ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ:
      Strong CALL: pct >= 15, ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ High
      Watch  CALL: pct >= 10, ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Strong
      Strong PUT : pct <= -15, ‡∏õ‡∏¥‡∏î‡πÉ‡∏Å‡∏•‡πâ Low
      Watch  PUT : pct <= -10, ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Strong
    """
    strong_call, watch_call, strong_put, watch_put = [], [], [], []

    for r in rows:
        sym, pct, c, h, l, v = r["T"], r["pct"], r["c"], r["h"], r["l"], r["v"]
        near_h, near_l = r["close_near_high"], r["close_near_low"]

        if pct >= 15 and near_h:
            strong_call.append((sym, pct, c, v, h))
        elif pct >= 10:
            watch_call.append((sym, pct, c, v, h))
        elif pct <= -15 and near_l:
            strong_put.append((sym, pct, c, v, l))
        elif pct <= -10:
            watch_put.append((sym, pct, c, v, l))

    def _line(name, bucket):
        if not bucket:
            return f"‚Ä¢ {name}: -"
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÇ‡∏ä‡∏ß‡πå 30
        bucket = bucket[:30]
        s = [f"{t[0]} @{_fmt_num(t[2])} ‚Äî pct {_fmt_num(t[1],1)}%, Vol {_fmt_num(t[3])}" for t in bucket]
        return "‚Ä¢ " + name + ": " + ", ".join(s)

    lines = []
    if header:
        lines.append(header.strip())
    lines += [
        "üü£ <b>‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)",
        _line("Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô ‚Äî <b>Strong CALL 30</b>", strong_call),
        _line("‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‚Äî <b>Watch CALL 30</b>", watch_call),
        _line("Momentum ‡∏Ç‡∏≤‡∏•‡∏á ‚Äî <b>Strong PUT 30</b>", strong_put),
        _line("‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á ‚Äî <b>Watch PUT 30</b>", watch_put),
        "",
        "üí° <b>‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:</b>",
        "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô",
        "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°",
        "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô",
        "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö",
    ]
    return "\n".join(lines)

# -------------------- Cache ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥ --------------------
_cache = {
    "signals": {"date": None, "text": None},
    "movers": {"date": None, "text": None},
    "outlook": {"date": None, "text": None},
}

# -------------------- Telegram Handlers --------------------
def cmd_help(update: Update, context: CallbackContext):
    text = (
        "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n"
        "‚Ä¢ /movers ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ)\n"
        "‚Ä¢ /signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Watch/Strong (CALL/PUT)\n"
        "‚Ä¢ /outlook ‚Äì ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        "‚Ä¢ /help ‚Äì ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n"
        f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå: pct ‚â• {DEFAULT_MIN_PCT:.1f}%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• {DEFAULT_MIN_PRICE:.2f}, Vol ‚â• {DEFAULT_MIN_VOL}"
    )
    update.message.reply_text(text)

def cmd_movers(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    try:
        update.message.reply_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Top Movers (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)‚Ä¶")

        d = _us_prev_trading_date_rough()

        # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡∏ä
        if _cache["movers"]["date"] == d and _cache["movers"]["text"]:
            _chunk_send(context.bot, chat_id, _cache["movers"]["text"])
            return

        rows = fetch_top_movers_free(date_iso=d)
        if not rows:
            context.bot.send_message(chat_id, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ")
            return

        # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏™‡∏î‡∏á TOP 20 ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô
        ups = [r for r in rows if r["pct"] > 0][:20]
        lines = [
            f"‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏ß‡∏±‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {d}\n"
            f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â• {DEFAULT_MIN_PCT:.1f}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• {DEFAULT_MIN_PRICE} | Vol ‚â• {DEFAULT_MIN_VOL}\n",
            "üìà <b>‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á:</b>"
        ]
        for r in ups:
            lines.append(f"‚Ä¢ {r['T']} @{_fmt_num(r['c'])} ‚Äî pct {_fmt_num(r['pct'],1)}%, Vol {_fmt_num(r['v'])}")

        text = "\n".join(lines)
        _cache["movers"]["date"] = d
        _cache["movers"]["text"] = text
        _chunk_send(context.bot, chat_id, text)

    except Exception as e:
        logger.error("movers error: %s\n%s", e, traceback.format_exc())
        context.bot.send_message(chat_id, f"‚ùå Movers error: {e}")

def cmd_signals(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    try:
        context.bot.send_message(chat_id, "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)‚Ä¶")

        d = _us_prev_trading_date_rough()
        if _cache["signals"]["date"] == d and _cache["signals"]["text"]:
            _chunk_send(context.bot, chat_id, _cache["signals"]["text"])
            return

        rows = fetch_top_movers_free(date_iso=d)
        if not rows:
            context.bot.send_message(chat_id, "‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ")
            return

        text = build_signals_from_day(
            rows,
            header=f"üîÆ ‡∏Ñ‡∏±‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å {d} (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon)"
        )
        _cache["signals"]["date"] = d
        _cache["signals"]["text"] = text
        _chunk_send(context.bot, chat_id, text)

    except Exception as e:
        logger.error("signals error: %s\n%s", e, traceback.format_exc())
        context.bot.send_message(chat_id, f"‚ùå Signals error: {e}")

def cmd_outlook(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    try:
        context.bot.send_message(chat_id, "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon‚Ä¶")

        d = _us_prev_trading_date_rough()
        if _cache["outlook"]["date"] == d and _cache["outlook"]["text"]:
            _chunk_send(context.bot, chat_id, _cache["outlook"]["text"])
            return

        rows = fetch_top_movers_free(date_iso=d)
        if not rows:
            context.bot.send_message(chat_id, "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå")
            return

        # ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ: ‡πÉ‡∏ä‡πâ build_signals ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏´‡∏±‡∏ß + ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î
        text = build_signals_from_day(
            rows,
            header="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon‚Ä¶"
        )
        _cache["outlook"]["date"] = d
        _cache["outlook"]["text"] = text
        _chunk_send(context.bot, chat_id, text)

    except Exception as e:
        logger.error("outlook error: %s\n%s", e, traceback.format_exc())
        context.bot.send_message(chat_id, f"‚ùå Outlook error: {e}")

# -------------------- Telegram Setup (Webhook) --------------------
updater = Updater(BOT_TOKEN, use_context=True)
dispatcher: Dispatcher = updater.dispatcher

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
dispatcher.add_handler(CommandHandler("help", cmd_help))
dispatcher.add_handler(CommandHandler("movers", cmd_movers))
dispatcher.add_handler(CommandHandler(["signals", "signal"], cmd_signals))
dispatcher.add_handler(CommandHandler("outlook", cmd_outlook))

# -------------------- Flask (health + webhook) --------------------
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "Bot is running fine.", 200

@app.route("/set-webhook", methods=["GET"])
def set_webhook():
    url = f"{PUBLIC_URL}/webhook"
    ok = updater.bot.set_webhook(url=url, max_connections=40)
    return jsonify({"ok": ok, "webhook": url})

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), updater.bot)
        dispatcher.process_update(update)
    except Exception as e:
        logger.error("webhook error: %s\n%s", e, traceback.format_exc())
    return "ok", 200

# -------------------- Entry --------------------
if __name__ == "__main__":
    # ‡∏ï‡∏±‡πâ‡∏á webhook ‡∏ï‡∏≠‡∏ô‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    try:
        url = f"{PUBLIC_URL}/webhook"
        updater.bot.set_webhook(url=url, max_connections=40)
        logger.info("Webhook set to %s", url)
    except Exception as e:
        logger.warning("Set webhook failed: %s", e)

    # ‡∏£‡∏±‡∏ô Flask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Render ‡∏ú‡∏π‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏î‡πâ
    app.run(host="0.0.0.0", port=PORT)
