# main.py  ‚Äî Stock Signal Bot (Polygon free mode + Telegram commands + Webhook/Flask)
import os
import json
import time
import math
import queue
import threading
import traceback
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import requests
from flask import Flask, request, jsonify

# ========= ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHAT_ID_DEFAULT = os.getenv("CHAT_ID", "").strip()
POLYGON_API_KEY = os.getenv("POLYGON_API_KEY", "").strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
PORT = int(os.getenv("PORT", "10000"))

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
ET = ZoneInfo("America/New_York")

# ========= Utils =========
def _now_et():
    return datetime.now(tz=ET)

def _yesterday_et():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ YYYY-MM-DD ‡∏Ç‡∏≠‡∏á '‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Polygon free (prev day grouped)"""
    d = _now_et().date() - timedelta(days=1)
    # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå/‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå
    while d.weekday() >= 5:  # 5=Sat,6=Sun
        d -= timedelta(days=1)
    return d.isoformat()

def _fmt_num(x, nd=2):
    try:
        if x is None: return "-"
        return f"{float(x):.{nd}f}"
    except Exception:
        return str(x)

def _close_near_high(o, c, h, tol=0.05):
    try:
        if h is None or c is None or h == 0: return False
        return (h - c) / h <= tol
    except Exception:
        return False

def _close_near_low(o, c, l, tol=0.05):
    try:
        if l is None or c is None: return False
        diff = c - l
        rng = max(1e-9, (c if c>l else l))
        return diff / rng <= tol
    except Exception:
        return False

def _body_strong(o, c, h, l):
    try:
        rng = max(1e-9, h - l)
        body = abs(c - o)
        return body / rng >= 0.6  # real-body >=60% ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
    except Exception:
        return False

def _pct_change(o, c):
    try:
        if not o: return 0.0
        return (c - o) / o * 100.0
    except Exception:
        return 0.0

def tg_send_text(text, chat_id=None, disable_web_page_preview=True):
    cid = str(chat_id or CHAT_ID_DEFAULT).strip()
    if not BOT_TOKEN or not cid:
        print("Telegram config missing.")
        return
    try:
        r = requests.post(
            TG_API + "/sendMessage",
            json={
                "chat_id": int(cid),
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": disable_web_page_preview,
            },
            timeout=20,
        )
        if r.status_code != 200:
            print("TG send:", r.status_code, r.text)
    except Exception as e:
        print("TG error:", e)

# ========= Polygon (free) =========
def polygon_grouped_prevday(date_iso: str):
    """
    ‡πÉ‡∏ä‡πâ endpoint ‡∏ü‡∏£‡∏µ: /v2/aggs/grouped/locale/us/market/stocks/{date}
    ‡∏Ñ‡∏∑‡∏ô list ‡∏Ç‡∏≠‡∏á dict: {T, v, o, c, h, l, ...}
    """
    url = (
        f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/{date_iso}"
        f"?adjusted=true&apiKey={POLYGON_API_KEY}"
    )
    r = requests.get(url, timeout=40)
    if r.status_code != 200:
        raise RuntimeError(f"Polygon HTTP {r.status_code}: {r.text}")
    data = r.json()
    if data.get("status") != "OK":
        # free plan: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ NOT_AUTHORIZED
        raise RuntimeError(json.dumps(data))
    return data.get("results", [])

# ========= Classifier =========
def classify_signals_from_grouped(results, min_price=0.30, min_vol=0):
    """
    ‡∏à‡∏±‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°:
      Strong CALL, Watch CALL, Strong PUT, Watch PUT
    ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏∂‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (‡∏¢‡∏∂‡∏î prev-day)
    """
    strong_call, watch_call, strong_put, watch_put = [], [], [], []

    for item in results:
        s = item.get("T")   # symbol
        v = float(item.get("v", 0))
        o = float(item.get("o", 0))
        c = float(item.get("c", 0))
        h = float(item.get("h", 0))
        l = float(item.get("l", 0))
        if not s or c <= 0 or c < min_price or v < min_vol or o <= 0:
            continue

        pct = _pct_change(o, c)
        note = []

        # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
        if _close_near_high(o, c, h): note.append("close near H")
        if _close_near_low(o, c, l):  note.append("close near L")
        if _body_strong(o, c, h, l):  note.append("strong body")

        # Heuristics
        if pct >= 15.0:
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÅ‡∏£‡∏á
            if _close_near_high(o, c, h) or _body_strong(o, c, h, l):
                strong_call.append((s, pct, c, v, ", ".join(note)))
            else:
                watch_call.append((s, pct, c, v, ", ".join(note)))
        elif 7.0 <= pct < 15.0:
            watch_call.append((s, pct, c, v, ", ".join(note)))

        if pct <= -15.0:
            if _close_near_low(o, c, l) or _body_strong(o, c, h, l):
                strong_put.append((s, pct, c, v, ", ".join(note)))
            else:
                watch_put.append((s, pct, c, v, ", ".join(note)))
        elif -15.0 < pct <= -7.0:
            watch_put.append((s, pct, c, v, ", ".join(note)))

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ß‡∏¢ ‡πÜ
    strong_call.sort(key=lambda x: (-x[1], -x[3]))
    watch_call.sort(key=lambda x: (-x[1], -x[3]))
    strong_put.sort(key=lambda x: (x[1], -x[3]))   # pct ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πà‡∏≠‡∏ô
    watch_put.sort(key=lambda x: (x[1], -x[3]))

    return {
        "strong_call": strong_call,
        "watch_call": watch_call,
        "strong_put": strong_put,
        "watch_put": watch_put,
    }

# ========= Feature: Movers (free) =========
def do_movers_free(chat_id=None, min_pct=10.0, min_price=0.30, min_vol=0):
    ref = _yesterday_et()
    tg_send_text("üï∞Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", chat_id)
    results = polygon_grouped_prevday(ref)

    # ‡∏Ñ‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á
    ups = []
    for it in results:
        s = it.get("T")
        v = float(it.get("v", 0))
        o = float(it.get("o", 0))
        c = float(it.get("c", 0))
        if not s or c < min_price or v < min_vol or o <= 0:
            continue
        pct = _pct_change(o, c)
        if pct >= min_pct:
            ups.append((s, pct, c, v))
    ups.sort(key=lambda x: (-x[1], -x[3]))

    lines = [f"‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {ref}\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•{min_pct:.1f}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•{min_price} | Vol ‚â•{min_vol}\n\nüìà <b>‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô:</b>"]
    if not ups:
        lines.append("‚Ä¢ (‡πÑ‡∏°‡πà‡∏û‡∏ö)")
    else:
        for s, pct, c, v in ups[:40]:
            lines.append(f"‚Ä¢ <b>{s}</b> +{_fmt_num(pct,1)}% @{_fmt_num(c,2)}  Vol:{int(v):,}")

    tg_send_text("\n".join(lines), chat_id)

# ========= Feature: Signals (lists) =========
def do_signals(chat_id=None):
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    groups = classify_signals_from_grouped(results)

    msgs = []
    msgs.append("üü¢ <b>Strong CALL</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["strong_call"][:30]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üü¢ <b>Watch CALL</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["watch_call"][:30]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üî¥ <b>Strong PUT</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["strong_put"][:30]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))
    msgs.append("üî¥ <b>Watch PUT</b>\n" + "\n".join(
        [f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}, {n}" if n else
         f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(p,1)}%, Vol {int(v):,}"
         for (s, p, c, v, n) in groups["watch_put"][:30]
        ] or ["‚Ä¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô)"]
    ))

    tg_send_text("\n\n".join(msgs), chat_id)

# ========= Feature: Outlook (summary + examples) =========
def do_outlook(chat_id=None):
    ref = _yesterday_et()
    tg_send_text("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", chat_id)
    results = polygon_grouped_prevday(ref)
    g = classify_signals_from_grouped(results)

    def _eg(lst, n=12):
        return ", ".join([x[0] for x in lst[:n]]) if lst else "-"

    text = (
        "üîÆ <b>‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        f"‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô:</b> Strong CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: { _eg(g['strong_call']) }\n"
        f"‚Ä¢ <b>‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô:</b> Watch CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: { _eg(g['watch_call']) }\n"
        f"‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏•‡∏á:</b> Strong PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: { _eg(g['strong_put']) }\n"
        f"‚Ä¢ <b>‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á:</b> Watch PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: { _eg(g['watch_put']) }\n\n"
        "üí° <b>‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:</b>\n"
        "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô\n"
        "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°\n"
        "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡πâ‡∏ô\n"
        "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö"
    )
    tg_send_text(text, chat_id)

# ========= Feature: Picks (quick ideas)
def do_picks(chat_id=None):
    ref = _yesterday_et()
    results = polygon_grouped_prevday(ref)
    g = classify_signals_from_grouped(results)

    picks = []

    def _pick_side(title, lst, take=5, side="CALL"):
        if not lst:
            picks.append(f"{title}: -")
            return
        lines = []
        for s, pct, c, v, note in lst[:take]:
            reason = []
            if side == "CALL":
                if "close near H" in (note or ""): reason.append("close‚âàH")
                if "strong body" in (note or ""): reason.append("body‚ñ≤")
                if pct >= 20: reason.append("mom‚ñ≤")
            else:
                if "close near L" in (note or ""): reason.append("close‚âàL")
                if "strong body" in (note or ""): reason.append("body‚ñº")
                if pct <= -20: reason.append("mom‚ñº")
            lines.append(f"‚Ä¢ <b>{s}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(pct,1)}%, Vol {int(v):,}  ({', '.join(reason)})")
        picks.append(f"{title}\n" + "\n".join(lines))

    _pick_side("‚úÖ <b>‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ CALL</b> (‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)", g["strong_call"], side="CALL")
    _pick_side("üü° <b>‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å CALL</b>", g["watch_call"], side="CALL")
    _pick_side("‚õî <b>‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ PUT</b> (‡∏•‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)", g["strong_put"], side="PUT")
    _pick_side("üîª <b>‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á PUT</b>", g["watch_put"], side="PUT")

    tg_send_text("\n\n".join(picks), chat_id)

# ========= Telegram Webhook router =========
def _handle_command(text: str, chat_id: str):
    t = (text or "").strip().lower()
    if t.startswith("/help"):
        tg_send_text(
            "üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n"
            "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n"
            "‚Ä¢ <b>/movers</b> ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ)\n"
            "‚Ä¢ <b>/signals</b> ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Watch/Strong (CALL/PUT)\n"
            "‚Ä¢ <b>/outlook</b> ‚Äì ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
            "‚Ä¢ <b>/picks</b> ‚Äì ‡∏ä‡∏∏‡∏î‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö\n"
            f"\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: pct ‚â• 10.0%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• 0.30, Vol ‚â• 0\n", chat_id
        )
    elif t.startswith("/movers"):
        do_movers_free(chat_id)
    elif t.startswith("/signals"):
        do_signals(chat_id)
    elif t.startswith("/outlook"):
        do_outlook(chat_id)
    elif t.startswith("/picks") or t.startswith("/pick"):
        do_picks(chat_id)
    else:
        tg_send_text("‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", chat_id)

# ========= Flask App =========
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running fine."

@app.route("/health")
def health():
    return jsonify(ok=True, time=str(datetime.utcnow()))

@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    try:
        data = request.get_json(force=True, silent=True) or {}
        msg = data.get("message") or data.get("edited_message") or {}
        chat = msg.get("chat", {})
        text = msg.get("text", "")
        chat_id = str(chat.get("id", CHAT_ID_DEFAULT))
        # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î CHAT_ID ‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô
        if CHAT_ID_DEFAULT and str(chat_id) != str(CHAT_ID_DEFAULT):
            # ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
            return jsonify(status="ignored"), 200
        if text:
            _handle_command(text, chat_id)
    except Exception as e:
        print("webhook error:", e, traceback.format_exc())
    return jsonify(ok=True)

@app.route("/set-webhook")
def set_webhook():
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á deploy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ Webhook ‚Üí /telegram"""
    try:
        if not PUBLIC_URL:
            return "PUBLIC_URL is required", 400
        # base URL (‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ú‡∏•‡∏≠‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô .../set-webhook)
        base = PUBLIC_URL
        if base.endswith("/set-webhook") or base.endswith("/telegram"):
            base = base.rsplit("/", 1)[0]
        url = f"{base}/telegram"
        r = requests.get(f"{TG_API}/setWebhook", params={"url": url}, timeout=20)
        return f"setWebhook ‚Üí {url} : {r.status_code} {r.text}"
    except Exception as e:
        return f"Error: {e}", 500

# ========= main =========
if __name__ == "__main__":
    print("Starting Flask on 0.0.0.0:", PORT)
    app.run(host="0.0.0.0", port=PORT)
