# -*- coding: utf-8 -*-
# Stock-signal-bot (Render/Telegram/Polygon)
# - ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ (conservative/balanced/momentum/reversal)
# - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Options: CALL/PUT
# - ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°)
# - ‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ REPEAT_AFTER_MIN
# - Flask keepalive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render (‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å PORT ‡∏´‡∏£‡∏∑‡∏≠ 10000)

import os
import time
import json
import requests
from datetime import datetime, timedelta
from flask import Flask

# ========= ENV (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Render: Environment Variables) =========
BOT_TOKEN        = os.environ.get("BOT_TOKEN", "").strip()
CHAT_ID          = os.environ.get("CHAT_ID", "").strip()
POLYGON_API_KEY  = os.environ.get("POLYGON_API_KEY", "").strip()

# ========= ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠) =========
PROFILE = "balanced"  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: "conservative" / "balanced" / "momentum" / "reversal"

_profiles = {
    # ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏Å
    "conservative": dict(
        CHECK_INTERVAL_SEC=90,
        ALERT_PCT=20.0,
        INCLUDE_LOSERS=True,
        MIN_PRICE=5.0,
        MIN_VOLUME=500_000,
        REPEAT_AFTER_MIN=90,
        SESSION_MODE="extended",
        CALL_PCT=7.0,
        PUT_PCT=-7.0,
        MIN_OPTION_PRICE=5.0,
        SEND_DAILY_SUMMARY=True, SUMMARY_HOUR=8, SUMMARY_MINUTE=0,
        WHITELIST=[],
    ),
    # ‡∏™‡∏°‡∏î‡∏∏‡∏• (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
    "balanced": dict(
        CHECK_INTERVAL_SEC=60,
        ALERT_PCT=15.0,
        INCLUDE_LOSERS=True,
        MIN_PRICE=2.0,
        MIN_VOLUME=200_000,
        REPEAT_AFTER_MIN=60,
        SESSION_MODE="extended",
        CALL_PCT=5.0,
        PUT_PCT=-5.0,
        MIN_OPTION_PRICE=1.0,
        SEND_DAILY_SUMMARY=True, SUMMARY_HOUR=8, SUMMARY_MINUTE=0,
        WHITELIST=[],
    ),
    # ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡πÅ‡∏£‡∏á (‡∏´‡∏≤‡πÄ‡∏ö‡∏£‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ï‡πå)
    "momentum": dict(
        CHECK_INTERVAL_SEC=45,
        ALERT_PCT=10.0,
        INCLUDE_LOSERS=True,
        MIN_PRICE=1.0,
        MIN_VOLUME=100_000,
        REPEAT_AFTER_MIN=45,
        SESSION_MODE="extended",
        CALL_PCT=4.0,
        PUT_PCT=-4.0,
        MIN_OPTION_PRICE=1.0,
        SEND_DAILY_SUMMARY=True, SUMMARY_HOUR=8, SUMMARY_MINUTE=0,
        WHITELIST=[],
    ),
    # ‡∏à‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™/‡∏™‡∏ß‡∏¥‡∏á‡πÅ‡∏£‡∏á (‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
    "reversal": dict(
        CHECK_INTERVAL_SEC=60,
        ALERT_PCT=12.0,
        INCLUDE_LOSERS=True,
        MIN_PRICE=1.0,
        MIN_VOLUME=150_000,
        REPEAT_AFTER_MIN=60,
        SESSION_MODE="extended",
        CALL_PCT=3.5,
        PUT_PCT=-3.5,
        MIN_OPTION_PRICE=1.0,
        SEND_DAILY_SUMMARY=True, SUMMARY_HOUR=8, SUMMARY_MINUTE=0,
        WHITELIST=[],
    ),
}
cfg = _profiles[PROFILE]

CHECK_INTERVAL_SEC = cfg["CHECK_INTERVAL_SEC"]
ALERT_PCT          = cfg["ALERT_PCT"]
INCLUDE_LOSERS     = cfg["INCLUDE_LOSERS"]
MIN_PRICE          = cfg["MIN_PRICE"]
MIN_VOLUME         = cfg["MIN_VOLUME"]
REPEAT_AFTER_MIN   = cfg["REPEAT_AFTER_MIN"]
SESSION_MODE       = cfg["SESSION_MODE"]
CALL_PCT           = cfg["CALL_PCT"]
PUT_PCT            = cfg["PUT_PCT"]
MIN_OPTION_PRICE   = cfg["MIN_OPTION_PRICE"]
SEND_DAILY_SUMMARY = cfg["SEND_DAILY_SUMMARY"]
SUMMARY_HOUR       = cfg["SUMMARY_HOUR"]
SUMMARY_MINUTE     = cfg["SUMMARY_MINUTE"]
WHITELIST          = set([s.upper() for s in cfg["WHITELIST"]])

# ========= Utils =========
def tg(text: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Telegram"""
    if not BOT_TOKEN or not CHAT_ID:
        print("Telegram not configured.")
        return
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": text}
        r = requests.post(url, json=payload, timeout=15)
        if r.status_code != 200:
            print("TG send:", r.status_code, r.text[:200])
    except Exception as e:
        print("TG error:", e)

def label_session():
    """‡∏õ‡πâ‡∏≤‡∏¢‡∏ö‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏•‡∏≤‡∏î (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ)"""
    # ‡πÅ‡∏Ñ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö ‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö timezone ‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á
    return {
        "extended": "üü¢ Live / üü° Pre / üîµ After",
        "regular":  "üü¢ Live only",
    }.get(SESSION_MODE, "üü¢ Live")

def option_tag(pct: float, last_price: float):
    """
    ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ Options ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏à‡∏≤‡∏Å % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô
    - CALL ‡πÄ‡∏°‡∏∑‡πà‡∏≠ pct >= CALL_PCT ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô >= MIN_OPTION_PRICE
    - PUT  ‡πÄ‡∏°‡∏∑‡πà‡∏≠ pct <= PUT_PCT  ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô >= MIN_OPTION_PRICE
    """
    if last_price is None:
        return ""
    if last_price < MIN_OPTION_PRICE:
        return ""  # ‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡∏µ‡πâ‡∏¢ ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡πà‡∏ô
    if pct is None:
        return ""
    if pct >= CALL_PCT:
        return " | Options idea: CALL üìà"
    if pct <= PUT_PCT:
        return " | Options idea: PUT üìâ"
    return ""

def _fmt_num(x):
    try:
        return f"{x:,.0f}"
    except:
        return str(x)

def now_str():
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")

# ========= Polygon fetchers =========
BASE = "https://api.polygon.io/v2/snapshot/locale/us/markets/stocks"

def fetch_movers(side="gainers"):
    """
    ‡∏î‡∏∂‡∏á Top gainers/losers ‡∏à‡∏≤‡∏Å Polygon
    ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: item["ticker"], item["todaysChangePerc"], item.get("lastTrade",{}).get("p"), item.get("day",{}).get("v")
    """
    url = f"{BASE}/{side}?apiKey={POLYGON_API_KEY}"
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    results = data.get("tickers", []) or []
    out = []
    for it in results:
        sym = it.get("ticker")
        pct = it.get("todaysChangePerc")
        last_price = None
        vol = None
        try:
            last_price = it.get("lastTrade", {}).get("p", None)
        except:
            pass
        try:
            vol = it.get("day", {}).get("v", None)
        except:
            pass
        out.append((sym, last_price, pct, vol))
    return out

# ========= Core scan loop =========
def main():
    tg(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô Top Movers (‚â•{ALERT_PCT:.1f}% | mode: {SESSION_MODE})\n{label_session()}")
    last_alert_time = {}  # sym -> datetime

    while True:
        try:
            # ---- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Polygon
            movers = []
            try:
                g = fetch_movers("gainers")
                movers.extend(g)
            except Exception as e:
                print("Polygon gainers error:", e)

            if INCLUDE_LOSERS:
                try:
                    l = fetch_movers("losers")
                    movers.extend(l)
                except Exception as e:
                    print("Polygon losers error:", e)

            # ---- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û & ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            hits = 0
            for sym, price, pct, vol in movers:
                if not sym:
                    continue
                u_sym = sym.upper()

                # whitelist (‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏≤)
                if WHITELIST and u_sym not in WHITELIST:
                    continue

                # ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°
                if price is None or price < MIN_PRICE:
                    continue
                if vol is not None and vol < MIN_VOLUME:
                    continue

                # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                if pct is None:
                    continue
                if abs(pct) < ALERT_PCT:
                    continue

                # ‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏ã‡πâ‡∏≥
                now = datetime.utcnow()
                last_t = last_alert_time.get(u_sym)
                if last_t and now - last_t < timedelta(minutes=REPEAT_AFTER_MIN):
                    continue
                last_alert_time[u_sym] = now

                # ‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                side = "üî∫GAINER" if pct >= 0 else "üîªLOSER"
                opt = option_tag(pct, price)
                msg = (
                    f"{side} ‚ö†Ô∏è QUALIFIED\n"
                    f"{u_sym}  +{pct:.1f}% | ${price:.2f}\n"
                    f"Vol: {_fmt_num(vol) if vol is not None else '-'}\n"
                    f"{opt}\n"
                    f"{now_str()}"
                )
                print("ALERT:", u_sym, pct, price, vol)
                tg(msg)
                hits += 1

            print("hits:", hits)

        except Exception as e:
            print("Loop error:", e)
            tg(f"‚ùóScanner error: {e}")

        time.sleep(CHECK_INTERVAL_SEC)

# ========= Flask keepalive =========
from flask import Response
app = Flask(__name__)

@app.route("/")
def home():
    return Response("Bot is running fine.", 200)

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Flask ‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï Render
    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ö‡∏ô Render ‚ÄúWeb Service‚Äù ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏£‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Flask ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö health check ‡∏ú‡πà‡∏≤‡∏ô waitress ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    import threading

    t = threading.Thread(target=main, daemon=True)
    t.start()

    port = int(os.environ.get("PORT", "10000"))
    # ‡πÉ‡∏ä‡πâ werkzeug ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ (Render ‡∏ó‡∏≥ health check ‡∏î‡πâ‡∏ß‡∏¢ GET /)
    app.run(host="0.0.0.0", port=port)
