# -*- coding: utf-8 -*-
# Stock-signal-bot ‚Äî ‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Polygon)
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å:
# /movers   : Top movers (‡∏ü‡∏£‡∏µ)
# /signals  : ‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT)
# /outlook  : ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)
# /picks    : ‡∏Ñ‡∏±‡∏î 5 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô (intraday idea)
# /help     : ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π
#
# ENV ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏ô Render:
# BOT_TOKEN, POLYGON_API_KEY    (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
# CHAT_ID                       (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö; ‡∏à‡∏∞‡πÉ‡∏ä‡πâ broadcast ‡πÑ‡∏î‡πâ)
# PORT                          (Render ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
#
# ‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô: Long-polling (‡∏ö‡πá‡∏≠‡∏ï) + Flask (health check ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Render ‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡∏¥‡∏î)

import os
import threading
import asyncio
from datetime import datetime, timedelta, timezone

import requests
from flask import Flask

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# -----------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ENV
# -----------------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
POLYGON_API_KEY = os.environ.get("POLYGON_API_KEY", "").strip()
CHAT_ID = os.environ.get("CHAT_ID", "").strip() or None
PORT = int(os.environ.get("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ENV: BOT_TOKEN")
if not POLYGON_API_KEY:
    raise RuntimeError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ENV: POLYGON_API_KEY")

# -----------------------------
# Utils & Data fetch (Polygon free mode: grouped bars of previous market day)
# -----------------------------
US_EAST = timezone(timedelta(hours=-4))  # EDT (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô EST ‡∏à‡∏∞ -5 ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á + API ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ)

def _prev_market_date_utc():
    # ‡πÄ‡∏≠‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô (‡∏ï‡∏≤‡∏°‡∏ô‡∏¥‡∏ß‡∏¢‡∏≠‡∏£‡πå‡∏Å) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ free plan ‡∏Ç‡∏≠ today's grouped ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    ny_now = datetime.now(US_EAST)
    d = ny_now.date() - timedelta(days=1)
    # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    while d.weekday() >= 5:  # 5=Sat,6=Sun
        d -= timedelta(days=1)
    return d.isoformat()

def _fmt_num(n, p=0):
    try:
        if p is None:
            p = 0
        return f"{float(n):,.{p}f}"
    except Exception:
        return str(n)

def _safe_pct(a, b):
    try:
        if b == 0:
            return 0.0
        return (a - b) / b * 100.0
    except Exception:
        return 0.0

def fetch_grouped_bars_yesterday(adjusted=True, limit=1000):
    """
    ‡∏î‡∏∂‡∏á top movers ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ü‡∏£‡∏µ)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏Ç‡∏≠‡∏á dict: {T, c, o, h, l, v, pct}
    """
    day = _prev_market_date_utc()
    url = (
        f"https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/"
        f"{day}?adjusted={'true' if adjusted else 'false'}&apiKey={POLYGON_API_KEY}"
    )
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    data = r.json()
    results = data.get("results", []) or []

    out = []
    for it in results:
        t = it.get("T")
        c = it.get("c")
        o = it.get("o")
        h = it.get("h")
        l = it.get("l")
        v = it.get("v")
        if not (t and c and o and h and l and v):
            continue
        pct = _safe_pct(c, o)
        out.append(
            {
                "T": t,
                "c": float(c),
                "o": float(o),
                "h": float(h),
                "l": float(l),
                "v": float(v),
                "pct": float(pct),
            }
        )
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
    out.sort(key=lambda x: abs(x["pct"]), reverse=True)
    return out[:limit]

# -----------------------------
# Rules: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT)
# -----------------------------
def _close_pos_in_range(c, l, h):
    rng = max(h - l, 1e-9)
    return (c - l) / rng  # 0 ‡πÉ‡∏Å‡∏•‡πâ Low, 1 ‡πÉ‡∏Å‡∏•‡πâ High

def build_signal_buckets(rows):
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dict:
    {
      'strong_call': [...], 'watch_call': [...],
      'strong_put':  [...], 'watch_put':  [...]
    }
    ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô tuple (sym, c, pct, v, note)
    """
    strong_call, watch_call, strong_put, watch_put = [], [], [], []

    for x in rows:
        sym, c, o, h, l, v, pct = x["T"], x["c"], x["o"], x["h"], x["l"], x["v"], x["pct"]
        if c < 0.30 or v <= 0:  # ‡∏ï‡∏±‡∏î penny ‡∏ó‡∏µ‡πà‡∏ö‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡πÜ ‡∏≠‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏á
            continue

        pos = _close_pos_in_range(c, l, h)  # ‡πÉ‡∏Å‡∏•‡πâ high?
        body = abs(c - o) / max(h - l, 1e-9)  # body size

        # -------- ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (CALL)
        if pct >= 8.0 and pos >= 0.8 and body >= 0.55:
            strong_call.append((sym, c, pct, v, "close near H, strong body"))
        elif pct >= 5.0 and pos >= 0.7:
            watch_call.append((sym, c, pct, v, "close near H"))

        # -------- ‡∏ù‡∏±‡πà‡∏á‡∏•‡∏á (PUT)
        if pct <= -8.0 and pos <= 0.2 and body >= 0.55:
            strong_put.append((sym, c, pct, v, "close near L, strong body"))
        elif pct <= -5.0 and pos <= 0.3:
            watch_put.append((sym, c, pct, v, "close near L"))

    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    def _top(lst, n=30):
        return sorted(lst, key=lambda z: abs(z[2]), reverse=True)[:n]

    return {
        "strong_call": _top(strong_call),
        "watch_call": _top(watch_call),
        "strong_put": _top(strong_put),
        "watch_put": _top(watch_put),
    }

def picks_intraday(buckets, n=5):
    # ‡∏Ñ‡∏±‡∏î 5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô‡∏à‡∏≤‡∏Å strong_call ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÑ‡∏õ‡∏î‡∏π watch_call
    base = buckets["strong_call"] + buckets["watch_call"]
    return base[:n]

# -----------------------------
# Formatters
# -----------------------------
def fmt_list(title, items):
    if not items:
        return f"‚Ä¢ <b>{title}</b>: -"
    lines = [f"‚Ä¢ <b>{title}</b>"]
    for sym, c, pct, v, note in items:
        lines.append(
            f"  ‚Ä¢ <b>{sym}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(pct,1)}%, Vol {_fmt_num(v,0)}"
            + (f", {note}" if note else "")
        )
    return "\n".join(lines)

def fmt_movers(rows, min_pct=10.0, min_price=0.30, min_vol=0, top=20):
    up = [x for x in rows if x["pct"] >= min_pct and x["c"] >= min_price and x["v"] >= min_vol]
    up = sorted(up, key=lambda z: z["pct"], reverse=True)[:top]
    dn = [x for x in rows if x["pct"] <= -min_pct and x["c"] >= min_price and x["v"] >= min_vol]
    dn = sorted(dn, key=lambda z: z["pct"])[:top]

    hdr = "‚úÖ <b>Top Movers</b> (‡∏ü‡∏£‡∏µ, ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n"
    ref = _prev_market_date_utc()
    hdr += f"<i>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {ref}</i>\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‚â•{min_pct:.1f}% | ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â•{min_price:.2f} | Vol ‚â•{min_vol}\n"

    def _side(label, lst):
        if not lst:
            return f"\nüìâ {label}: -"
        lines = [f"\nüìà {label if label=='‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á' else label}:"]
        for x in lst:
            lines.append(
                f"‚Ä¢ <b>{x['T']}</b> +{_fmt_num(x['pct'],1)}% @{_fmt_num(x['c'],2)} "
                f"Vol:{_fmt_num(x['v'],0)}"
                if label == "‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á"
                else f"‚Ä¢ <b>{x['T']}</b> {_fmt_num(x['pct'],1)}% @{_fmt_num(x['c'],2)} "
                     f"Vol:{_fmt_num(x['v'],0)}"
            )
        return "\n".join(lines)

    msg = hdr + _side("‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á", up) + _side("‡∏•‡∏á‡πÅ‡∏£‡∏á", dn)
    return msg

def fmt_outlook(buckets):
    # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)
    examples = lambda key: ", ".join([t[0] for t in buckets[key][:12]]) or "-"
    lines = []
    lines.append("üîÆ <b>‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b> (‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)")
    lines.append(f"‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô:</b> Strong CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {examples('strong_call')}")
    lines.append(f"‚Ä¢ <b>‡∏•‡∏∏‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô:</b> Watch CALL 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {examples('watch_call')}")
    lines.append(f"‚Ä¢ <b>Momentum ‡∏Ç‡∏≤‡∏•‡∏á:</b> Strong PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {examples('strong_put')}")
    lines.append(f"‚Ä¢ <b>‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á:</b> Watch PUT 30 ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {examples('watch_put')}")
    lines.append("\nüí° <b>‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î:</b>\n"
                 "‚Ä¢ Strong CALL ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å/‡∏•‡∏∏‡πâ‡∏ô‡∏ó‡∏≥ High ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏ô‡∏∏‡∏ô\n"
                 "‚Ä¢ Watch CALL ‡∏£‡∏≠‡πÄ‡∏ö‡∏£‡∏Å High ‡πÄ‡∏î‡∏¥‡∏° + ‡∏ß‡∏≠‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°\n"
                 "‚Ä¢ Strong PUT ‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏ö‡∏≤‡∏ß‡∏î‡πå‡∏™‡∏±‡πâ‡∏ô\n"
                 "‚Ä¢ Watch PUT ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö")
    return "\n".join(lines)

# -----------------------------
# Telegram Handlers (async)
# -----------------------------
async def _load_free_data():
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å requests ‡πÉ‡∏ô thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å event loop
    rows = await asyncio.to_thread(fetch_grouped_bars_yesterday)
    return rows, build_signal_buckets(rows)

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Stock Signal Bot (‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ)\n"
        "‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        parse_mode=ParseMode.HTML,
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n"
        "‚Ä¢ /movers ‚Äì ‡∏î‡∏π Top Movers (‡∏ü‡∏£‡∏µ)\n"
        "‚Ä¢ /signals ‚Äì ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° Strong/Watch (CALL/PUT)\n"
        "‚Ä¢ /outlook ‚Äì ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡∏±‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)\n"
        "‚Ä¢ /picks ‚Äì ‡∏Ñ‡∏±‡∏î 5 ‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n"
        "\n‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: pct ‚â• 10.0%, ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚â• 0.30, Vol ‚â• 0",
        parse_mode=ParseMode.HTML,
    )

async def cmd_movers(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", parse_mode=ParseMode.HTML)
    try:
        rows, _ = await _load_free_data()
        txt = fmt_movers(rows)
    except Exception as e:
        txt = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"
    await msg.edit_text(txt, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def cmd_signals(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì...", parse_mode=ParseMode.HTML)
    try:
        _, buckets = await _load_free_data()
        parts = [
            "üìä <b>‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô)</b>",
            fmt_list("Strong CALL", buckets["strong_call"]),
            fmt_list("Watch  CALL",  buckets["watch_call"]),
            fmt_list("Strong PUT",  buckets["strong_put"]),
            fmt_list("Watch  PUT",   buckets["watch_put"]),
        ]
        txt = "\n\n".join(parts)
    except Exception as e:
        txt = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"
    await msg.edit_text(txt, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def cmd_outlook(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å Polygon...", parse_mode=ParseMode.HTML)
    try:
        _, buckets = await _load_free_data()
        txt = fmt_outlook(buckets)
    except Exception as e:
        txt = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á outlook ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"
    await msg.edit_text(txt, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def cmd_picks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô...", parse_mode=ParseMode.HTML)
    try:
        _, buckets = await _load_free_data()
        picks = picks_intraday(buckets, n=5)
        if not picks:
            txt = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏£‡∏±‡∏ö"
        else:
            lines = ["üéØ <b>Picks (5)</b> ‚Äî ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏Å‡πá‡∏á‡∏Å‡∏≥‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"]
            for sym, c, pct, v, note in picks:
                lines.append(
                    f"‚Ä¢ <b>{sym}</b> @{_fmt_num(c,2)} ‚Äî pct {_fmt_num(pct,1)}%, "
                    f"Vol {_fmt_num(v,0)}" + (f", {note}" if note else "")
                )
            txt = "\n".join(lines)
    except Exception as e:
        txt = f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"
    await msg.edit_text(txt, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# -----------------------------
# Application & Flask
# -----------------------------
app = Flask(__name__)
_tele_app = ApplicationBuilder().token(BOT_TOKEN).build()

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
_tele_app.add_handler(CommandHandler("start",   cmd_start))
_tele_app.add_handler(CommandHandler("help",    cmd_help))
_tele_app.add_handler(CommandHandler("movers",  cmd_movers))
_tele_app.add_handler(CommandHandler("signals", cmd_signals))
_tele_app.add_handler(CommandHandler("outlook", cmd_outlook))
_tele_app.add_handler(CommandHandler("picks",   cmd_picks))

# ‡∏´‡∏ô‡πâ‡∏≤ health check / root
@app.get("/")
def home():
    return "Bot is running fine."

@app.get("/healthz")
def healthz():
    return "ok"

def run_polling():
    # ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö long polling ‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å
    asyncio.run(_tele_app.run_polling(close_loop=False))

if __name__ == "__main__":
    # ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô background thread
    t = threading.Thread(target=run_polling, daemon=True)
    t.start()
    # ‡πÄ‡∏õ‡∏¥‡∏î Flask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Render ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏à‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï
    app.run(host="0.0.0.0", port=PORT)
